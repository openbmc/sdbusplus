{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2de432bd_fb01a88d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-20T01:07:51Z",
      "side": 1,
      "message": "FWIW, the async version of add match didn\u0027t exist in sd-bus when we did the asio extensions initially.  We\u0027ve known about this \"bug\" for a while, but given that the dbus daemon responds pretty quickly, it wasn\u0027t a huge issue in practice.\n\nI agree, it\u0027s probably time to fix it.\n\nWe probably need an async capable match_t in the asio namespace, that accepts a callback like the asio extensions would expect.  We should look at signals_set https://live.boost.org/doc/libs/1_84_0/doc/html/boost_asio/reference/signal_set.html\n\nAs a reference for how to do these callbacks and propagate errors on asio callbacks, including the queue.\n\nI\u0027ve mocked up what that could look like here:\nhttps://gerrit.openbmc.org/c/openbmc/sdbusplus/+/68959\n\nFeel free to incorporate it into your patch, or take over mine.",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdb83083_1bdafb9a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-20T02:43:30Z",
      "side": 1,
      "message": "\u003e We\u0027ve known about this \"bug\" for a while, but given that the dbus daemon responds pretty quickly, it wasn\u0027t a huge issue in practice.\n\nI feel like I\u0027m still getting conflicting information here.  The commit message says \"delay\" but elsewhere LeiYU claimed there was a hang.  If this is about fixing a delay in the time it takes for the dbus-broker to respond, this seems like excessive work and excessive complexity for almost no benefit.  If we start making the match registration async, I\u0027m certain people will start having incorrect code because they don\u0027t understand that there is this delay and further dbus queries they do have an implicit ordering incorrectness.\n\nIf there is a hang, we need to fix the hang; it is a bug in the asio code.\nIf there is a delay, I think we need a real use-case where these few ms cause a problem.",
      "parentUuid": "2de432bd_fb01a88d",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b6e9009_bcbfebd7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-01-21T15:16:06Z",
      "side": 1,
      "message": "It\u0027s not really delay nor hang, the events are queued and not handled until a new event is polled by `read_wait()`.\n\nWe need to fix it. And a proper fix is to add the new API for asio async match, and change the existing asio code to use the new API.\n\nI will integrate Ed\u0027s patch, test it and submit a new PS",
      "parentUuid": "fdb83083_1bdafb9a",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad64bd37_5646ee6d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-21T19:41:57Z",
      "side": 1,
      "message": "Why do you say that is a \"proper fix\"?  I\u0027m not following. \n\nYou\u0027re implying that any code using the asio server MUST use all async calls or else the server can fail. This is a bug. Requesting everyone to use async everywhere, while perhaps \"better\" in some regards, is not a fix because it means people have to be explicitly aware (rather than made aware by compile issues).",
      "parentUuid": "9b6e9009_bcbfebd7",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fce184b0_b81231b8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-21T20:48:37Z",
      "side": 1,
      "message": "\u003e The commit message says \"delay\" but elsewhere LeiYU claimed there was a hang.\n\nIn my experience, assuming both dbus and non-dbus code are correctly written, it causes a delay, not a permanent deadlock.  I\u0027ve seen deadlocks before on code that I would say is incorrect as written and had internal timing races that something like this exposed, but that\u0027s not sdbuspluses fault.\n\n\n\u003e You\u0027re implying that any code using the asio server MUST use all async calls\n\n\"When using blocking calls, you will block all other async actions until this transaction completes\" I think is the correct statement.\n\nYes, the dbus transactions go through just fine, sd-bus.c epolls internally for some time, but things like sockets or timers that sd-bus doesn\u0027t know about don\u0027t get serviced.\n\nI updated the commit message on my other patch to be more specific about what the problem is.\n\n\u003e (rather than made aware by compile issues).\n\nMy long term (6 monthish?) intent for me was to get the new match object in, get old code ported over to it, then make the asio bus_t inheritance [1] private, which would make these kinds of problems compile time failures if you bypassed the asio connection object (there\u0027d be no API that let you do that anymore), and runtime failures if you tried to do a blocking call from within an async callback (by checking io_context::stopped() before doing a blocking call).  FWIW, writing up that complexity is why I\u0027ve had the majority of the other patch content sitting in my TODO list for 12+ months.  I wanted to write up a \"fix it completely and forever\" plan, but if Lei is seeing the same issues I figured that patch might be a better starting point, even without the full plan written down.\n\n[1] https://github.com/openbmc/sdbusplus/blob/5828bccf3e0e50c15ce0ddd29d55551f08d55f2f/include/sdbusplus/asio/connection.hpp#L51C20-L51C27",
      "parentUuid": "fdb83083_1bdafb9a",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d111f7e1_8c880aba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-02-07T02:43:13Z",
      "side": 1,
      "message": "The new asio::match is added.",
      "parentUuid": "fce184b0_b81231b8",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95a813b7_99e6f74a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-22T23:33:18Z",
      "side": 1,
      "message": "Lei,\n\nCan you confirm that these 3 match_t constructors are the ones causing issues in your tests?\n\nhttps://github.com/openbmc/bmcweb/blob/5ae1f7f3e0c78f84d153f7ef24ee22bb1c73eaa0/include/dbus_monitor.hpp#L209C21-L209C62\n\nThose are the only ones I know of that are constructed in response to an http request.",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9d6c29d_48c5ddc0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-02-07T02:43:13Z",
      "side": 1,
      "message": "There are matches created at runtime in task.hpp, image_upload.hpp and update_service.hpp as well",
      "parentUuid": "95a813b7_99e6f74a",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d1df6cc_de97964c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-15T23:34:41Z",
      "side": 1,
      "message": "Right.... which one is causing the problem you\u0027re seeing?",
      "parentUuid": "b9d6c29d_48c5ddc0",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95c17e96_9609c052",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-02-20T02:06:01Z",
      "side": 1,
      "message": "All of the above could cause the issue.\n\nIn our real case, it\u0027s mostly likely the image_upload.hpp and update_service.hpp causing the issue.",
      "parentUuid": "4d1df6cc_de97964c",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42ce24d8_1667f88a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-04T17:58:40Z",
      "side": 1,
      "message": "ACK",
      "parentUuid": "95c17e96_9609c052",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0a0540b_720bf9e1",
        "filename": "include/sdbusplus/bus/match.hpp",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-20T01:07:51Z",
      "side": 1,
      "message": "We should not be adding an asio dependency to non-asio objects.",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0a5f622_e925804d",
        "filename": "include/sdbusplus/bus/match.hpp",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-02-07T02:43:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0a0540b_720bf9e1",
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5db91473_5d55427a",
        "filename": "src/bus/match.cpp",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-20T01:07:51Z",
      "side": 1,
      "message": "Why is install_callback nullptr?  Surely we need to notify the caller that the installation succeeded, or pass the error back?",
      "range": {
        "startLine": 29,
        "startChar": 61,
        "endLine": 29,
        "endChar": 68
      },
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "785ca993_9daed006",
        "filename": "src/bus/match.cpp",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-20T01:11:30Z",
      "side": 1,
      "message": "From the sdbusplus docs:\n\n\u003e If this function is specified as NULL a default implementation is used that terminates the bus connection should installing the match fail.\n\nI\u0027m guessing that\u0027s really not the behavior we want.",
      "parentUuid": "5db91473_5d55427a",
      "range": {
        "startLine": 29,
        "startChar": 61,
        "endLine": 29,
        "endChar": 68
      },
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0f4ab09_b0812f3e",
        "filename": "src/bus/match.cpp",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-01-21T15:16:06Z",
      "side": 1,
      "message": "Right, it\u0027s going to be replaced by a user-provided callback with the new asio async match API.",
      "parentUuid": "785ca993_9daed006",
      "range": {
        "startLine": 29,
        "startChar": 61,
        "endLine": 29,
        "endChar": 68
      },
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5925bd25_aca75b5e",
        "filename": "src/bus/match.cpp",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-21T20:48:37Z",
      "side": 1,
      "message": "I don\u0027t understand.  There\u0027s no way to set a a user-provided handler if it\u0027s set to nullptr here.  it sounds like you\u0027re going to move to the asio match object, so this might not matter anymore (as that installs both handlers), but something to consider if this patch goes forward.",
      "parentUuid": "b0f4ab09_b0812f3e",
      "range": {
        "startLine": 29,
        "startChar": 61,
        "endLine": 29,
        "endChar": 68
      },
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1099ff41_8c72df3a",
        "filename": "src/bus/match.cpp",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-01-22T05:49:09Z",
      "side": 1,
      "message": "Yes, as discussed here, we all agree that we will introduce a new asio::match, and in that API it will have a user-provided callback.\nThe code here will be replaced by the new asio::match API.",
      "parentUuid": "5925bd25_aca75b5e",
      "range": {
        "startLine": 29,
        "startChar": 61,
        "endLine": 29,
        "endChar": 68
      },
      "revId": "ee93f2d65dde9bd727453299e4e79555bd0ad81b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}