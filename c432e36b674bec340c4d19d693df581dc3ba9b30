{
  "comments": [
    {
      "key": {
        "uuid": "fee010ba_26dba4d2",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-01-14T18:00:03Z",
      "side": 1,
      "message": "The path::filename returns an empty string rather than a std::optional.  Should we do the same?",
      "revId": "c432e36b674bec340c4d19d693df581dc3ba9b30",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87576e6d_7d9e9a96",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-14T18:22:52Z",
      "side": 1,
      "message": "Sounds reasonable.  My thinking was that dbus paths aren\u0027t allowed to be filenameless, whereas std::filesystem::path can be a directory, but now that I think about it, it\u0027s roughly the same.\n\nThe other thinking is that std::optional makes it a lot more obvious that you need to check for errors before using the string, but I guess making it look like the standard probably trumps ease of use.",
      "parentUuid": "fee010ba_26dba4d2",
      "revId": "c432e36b674bec340c4d19d693df581dc3ba9b30",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4854259_3aabb157",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-14T22:10:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87576e6d_7d9e9a96",
      "revId": "c432e36b674bec340c4d19d693df581dc3ba9b30",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "798328fa_74f24d25",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-01-14T18:00:03Z",
      "side": 1,
      "message": "parent_path always returns \"/\" in the case where a path like \"/\" is passed in.  std::optional isn\u0027t required.",
      "revId": "c432e36b674bec340c4d19d693df581dc3ba9b30",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5875cf7d_1f366b16",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-14T18:22:52Z",
      "side": 1,
      "message": "Sounds reasonable, will fix.",
      "parentUuid": "798328fa_74f24d25",
      "revId": "c432e36b674bec340c4d19d693df581dc3ba9b30",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e7618f5_0f8d058c",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-14T22:10:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5875cf7d_1f366b16",
      "revId": "c432e36b674bec340c4d19d693df581dc3ba9b30",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01630347_4a280438",
        "filename": "test/message/types.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-01-14T18:00:03Z",
      "side": 1,
      "message": "I\u0027d like these test cases to be compared with filesystem::path and have the same behavior.",
      "revId": "c432e36b674bec340c4d19d693df581dc3ba9b30",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2d68c7a_9d736b45",
        "filename": "test/message/types.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-14T22:16:03Z",
      "side": 1,
      "message": "There has to be some differences in some regards, right?\n\n\"abc\" is a valid std::filesystem::path, but is not a valid dbus path.  \".\", \"..\" ect are also valid std::filesystem::paths.  In the context of this patch, I really don\u0027t want to think through what a dbus relative paths would look like, as I don\u0027t think the added complexity is worth it.  Does that jive with you?\n\nAre you ok with the approach that \"Valid dbus paths will have the same behavior as the equivalent std::filesystem::path, but invalid dbus paths might return empty string more often\"?",
      "parentUuid": "01630347_4a280438",
      "revId": "c432e36b674bec340c4d19d693df581dc3ba9b30",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0a7f86c_7686b976",
        "filename": "test/message/types.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-01-15T12:39:43Z",
      "side": 1,
      "message": "\u003e ... Does that jive with you?\n\nYep.\n\n\u003e Are you ok with the approach that \"Valid dbus paths will have the same behavior as the equivalent std::filesystem::path, but invalid dbus paths might return empty string more often\"?\n\nAbsolutely.  My preference would be that:\n- valid dbus paths operate in the same way as filesystem::path\n- invalid dbus paths are undefined behavior\n\nThis allows us to implement with filesystem::path and really covers all the useful cases of dbus path operations.  I\u0027d like to do some refactoring to see if I can just make both string_wrapper classes so that they inherit from the underlying type (string vs path) and then we get a bunch of implementations for free.\n\n\u003e There has to be some differences in some regards, right?\n\nAre there any if we treat invalid dbus paths as UB?",
      "parentUuid": "b2d68c7a_9d736b45",
      "revId": "c432e36b674bec340c4d19d693df581dc3ba9b30",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9cb8cae_8b62b61a",
        "filename": "test/message/types.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-15T17:23:33Z",
      "side": 1,
      "message": "\u003e \u003e ... Does that jive with you?\n\u003e \n\u003e Yep.\n\u003e \n\u003e \u003e Are you ok with the approach that \"Valid dbus paths will have the same behavior as the equivalent std::filesystem::path, but invalid dbus paths might return empty string more often\"?\n\u003e \n\u003e Absolutely.  My preference would be that:\n\u003e - valid dbus paths operate in the same way as filesystem::path\n\u003e - invalid dbus paths are undefined behavior\n\nAt some point, it\u0027s be really nice if we had a constructor that didn\u0027t allow constructing invalid dbus paths, but that\u0027s a problem for another day.\n\n\u003e \n\u003e This allows us to implement with filesystem::path and really covers all the useful cases of dbus path operations.  I\u0027d like to do some refactoring to see if I can just make both string_wrapper classes so that they inherit from the underlying type (string vs path) and then we get a bunch of implementations for free.\n\u003e \n\u003e \u003e There has to be some differences in some regards, right?\n\u003e \n\u003e Are there any if we treat invalid dbus paths as UB?\n\nI don\u0027t think there are.  Sounds good to me.\n\n\nI can compare these against their std::filesystem::path bretheren (probably today).",
      "parentUuid": "c0a7f86c_7686b976",
      "revId": "c432e36b674bec340c4d19d693df581dc3ba9b30",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}