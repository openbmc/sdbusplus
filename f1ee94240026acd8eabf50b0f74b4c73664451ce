{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "58aa5b33_0504dac9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-15T13:12:20Z",
      "side": 1,
      "message": "What is the potential memory leak?  I\u0027m not seeing it.\n\nI don\u0027t think two copies of the same code is better so I\u0027d like to avoid it if we can come up with a better solution.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 44
      },
      "revId": "f1ee94240026acd8eabf50b0f74b4c73664451ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5887494f_dcf15eaa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-10-16T06:01:26Z",
      "side": 1,
      "message": "I added the comment in the other thread in more detail. https://gerrit.openbmc.org/c/openbmc/sdbusplus/+/57948/comments/16d3a874_70c601f4\n\n```\n#include \u003csdbusplus/asio/property.hpp\u003e\n#include \u003csdbusplus/bus.hpp\u003e\n\n#include \u003cfunctional\u003e\n\nvoid handler(const std::string\u0026 /*unused*/,\n             const boost::system::error_code /*unused*/,\n             const std::vector\u003c\n                 std::pair\u003cstd::string, std::variant\u003cstd::string\u003e\u003e\u003e\u0026 /*unused*/)\n{}\n\nvoid test(sdbusplus::asio::connection* conn)\n{\n    std::string test \u003d \"test\";\n    sdbusplus::asio::getAllProperties\u003cstd::variant\u003cstd::string\u003e\u003e(\n        *conn, \"xyz.openbmc_project.EntityManager\", \"path\",\n        \"xyz.openbmc_project.Inventory.Decorator.Asset\",\n        std::bind_front(handler, test));\n}\n```\n\nThe issue only happen if we are capturing any variables. I also don\u0027t really see the leak.\n\nI don\u0027t have a great way to resolve that issue",
      "parentUuid": "58aa5b33_0504dac9",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 44
      },
      "revId": "f1ee94240026acd8eabf50b0f74b4c73664451ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17abfe40_c32cbe35",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-16T19:34:50Z",
      "side": 1,
      "message": "Have you tried using a lambda instead of bind_front?\n\nI don\u0027t really want to make a bogus change here to work around a bad linter issue.  You can add NOLINT comments around the code in your repository if you really don\u0027t think this is an issue.\n\nIdeally we would create a small (non-sdbusplus) recreate and send it upstream to clang as a bug-report.",
      "parentUuid": "5887494f_dcf15eaa",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 44
      },
      "revId": "f1ee94240026acd8eabf50b0f74b4c73664451ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21b80c34_c8ea713c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-10-17T05:55:55Z",
      "side": 1,
      "message": "yeah, I also tried it with lambda and have similar issue.\n\nBut with lambda, it is fine with if the captured variables are primitive.\n\nI\u0027ll try to recreate it and send it to clang. with a smaller code snippet and see.",
      "parentUuid": "17abfe40_c32cbe35",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 44
      },
      "revId": "f1ee94240026acd8eabf50b0f74b4c73664451ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cb1153f_df7e24bb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-10-17T06:37:54Z",
      "side": 1,
      "message": "I looked into it a bit more again and only `getAllProperties` is having this issue.\n\nSeems like how we handle the handler was an issue. The current change resolves that issue, but there is probably a better way of handling it.",
      "parentUuid": "21b80c34_c8ea713c",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 44
      },
      "revId": "f1ee94240026acd8eabf50b0f74b4c73664451ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c801532e_41d82cdb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-10-17T07:11:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cb1153f_df7e24bb",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 44
      },
      "revId": "f1ee94240026acd8eabf50b0f74b4c73664451ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16d3a874_70c601f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-10-14T22:13:12Z",
      "side": 1,
      "message": "this is not ideal at all, but we are hitting the following error with getAllProperties\n\n```\n../main.cpp:21:1: error: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks,-warnings-as-errors]\n}\n^\n/workspace/gBMC/local-dev/crash_dump/build-local/../main.cpp:20:9: note: Calling constructor for \u0027function\u003cvoid (boost::system::error_code, const std::vector\u003cstd::pair\u003cstd::basic_string\u003cchar\u003e, std::variant\u003cstd::basic_string\u003cchar\u003e\u003e\u003e\u003e \u0026)\u003e\u0027\n        std::bind_front(handler, test));\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/std_function.h:447:4: note: Taking true branch\n          if (_My_handler::_M_not_empty_function(__f))\n          ^\n/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/std_function.h:449:8: note: Calling \u0027_Base_manager::_M_init_functor\u0027\n              _My_handler::_M_init_functor(_M_functor,\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/std_function.h:215:6: note: Calling \u0027_Base_manager::_M_create\u0027\n            _M_create(__functor, std::forward\u003c_Fn\u003e(__f), _Local_storage());\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/std_function.h:161:10: note: Memory is allocated\n              \u003d new _Functor(std::forward\u003c_Fn\u003e(__f));\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/std_function.h:215:6: note: Returned allocated memory\n            _M_create(__functor, std::forward\u003c_Fn\u003e(__f), _Local_storage());\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/std_function.h:449:8: note: Returned allocated memory\n              _My_handler::_M_init_functor(_M_functor,\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/workspace/gBMC/local-dev/crash_dump/build-local/../main.cpp:20:9: note: Returning from constructor for \u0027function\u003cvoid (boost::system::error_code, const std::vector\u003cstd::pair\u003cstd::basic_string\u003cchar\u003e, std::variant\u003cstd::basic_string\u003cchar\u003e\u003e\u003e\u003e \u0026)\u003e\u0027\n        std::bind_front(handler, test));\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/workspace/gBMC/local-dev/crash_dump/build-local/../main.cpp:21:1: note: Potential memory leak\n}\n^\nSuppressed 130040 warnings (130033 in non-user code, 7 with check filters).\n```\n\nExample code that hit the issue.\n```\n#include \u003csdbusplus/asio/property.hpp\u003e\n#include \u003csdbusplus/bus.hpp\u003e\n\n#include \u003cfunctional\u003e\n\nvoid handler(const std::string\u0026 /*unused*/,\n             const boost::system::error_code /*unused*/,\n             const std::vector\u003c\n                 std::pair\u003cstd::string, std::variant\u003cstd::string\u003e\u003e\u003e\u0026 /*unused*/)\n{}\n\nvoid test(sdbusplus::asio::connection* conn)\n{\n    std::string test \u003d \"test\";\n    sdbusplus::asio::getAllProperties\u003cstd::variant\u003cstd::string\u003e\u003e(\n        *conn, \"xyz.openbmc_project.EntityManager\", \"path\",\n        \"xyz.openbmc_project.Inventory.Decorator.Asset\",\n        std::bind_front(handler, test));\n}\n```\n\n----\n\nany suggestion on how to fix it properly?",
      "revId": "f1ee94240026acd8eabf50b0f74b4c73664451ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e9e0267_2918f4b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-10-17T06:37:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16d3a874_70c601f4",
      "revId": "f1ee94240026acd8eabf50b0f74b4c73664451ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}