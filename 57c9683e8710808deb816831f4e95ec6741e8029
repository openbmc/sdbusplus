{
  "comments": [
    {
      "key": {
        "uuid": "d42a76b0_895bcc77",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-02-23T01:06:50Z",
      "side": 1,
      "message": "Couldn\u0027t this just be replaced with std::forward(handler)?",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a37a42e_fd6f1815",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T01:57:11Z",
      "side": 1,
      "message": "This isn\u0027t a method, it\u0027s a lambda capture, so my understanding is that std::forward isn\u0027t applicable here, because we aren\u0027t calling a method, we\u0027re calling an inline constructor, similar to the form\n\nint x \u003d std::move(y);\n\nYou would never write this inline:\nint x \u003d std::forward(y);\n\nas it wouldn\u0027t compile (I think).\n\nSaid another way, you can\u0027t have perfect forwarding if the value isn\u0027t being forwarded, but is immediately being used.\n\nI\u0027m mostly sure on the above, but I\u0027ve never been super clear on the differences between std::forward and std::move.  I could be proven wrong, but if I remember right, this move is how the ASIO internals do it (through various macros and boost::bind) and I like to assume those guys understand this stuff better than I do.",
      "parentUuid": "d42a76b0_895bcc77",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24690d9f_31a41e43",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T02:42:04Z",
      "side": 1,
      "message": "Nevermind.  Latest patchset implements this.  I\u0027m still not sure the advantage in this case, but I can get behind std::forward being better in theory, and it does compile and work, which is not what I expected.",
      "parentUuid": "9a37a42e_fd6f1815",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc17ec91_43164e0d",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-02-23T03:24:15Z",
      "side": 1,
      "message": "It\u0027s not clear with all the diff colorations, but I was commenting on the whole lambda - I think this could just be bus.async_method_call(std::forward(handler), service,...) because the lambda doesn\u0027t do anything extra now.\n\nBut either way, the rule I learned from Scott Meyer is to use std::forward on universal references (which handler is). Since handler could theoretically be an lvalue reference to a closure object, we should use std::forward to preserve that type. (Although passing lvalue closures seems to be less common in practice in our code.)",
      "parentUuid": "24690d9f_31a41e43",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "947ff8bc_62b061f6",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T03:30:13Z",
      "side": 1,
      "message": "\u003e It\u0027s not clear with all the diff colorations, but I was commenting on the whole lambda - I think this could just be bus.async_method_call(std::forward(handler), service,...) because the lambda doesn\u0027t do anything extra now.\n\nOH, I understand now.  That\u0027s a really good point.  Will fix.\n\n\u003e \n\u003e But either way, the rule I learned from Scott Meyer is to use std::forward on universal references (which handler is). Since handler could theoretically be an lvalue reference to a closure object, we should use std::forward to preserve that type. (Although passing lvalue closures seems to be less common in practice in our code.)\n\nOk, that makes sense to me.  Patrick also hoped on discord with me for a second, and the change makes sense.  I\u0027m logging off for the night, but I\u0027ll get it fixed in the morning.",
      "parentUuid": "bc17ec91_43164e0d",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45918381_da5ba2e7",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:05:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "947ff8bc_62b061f6",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c78fd4b9_32a3d3d2",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-02-23T01:06:50Z",
      "side": 1,
      "message": "std::forward instead?",
      "range": {
        "startLine": 34,
        "startChar": 19,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "578058d3_6bdbd4c5",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T01:57:11Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "c78fd4b9_32a3d3d2",
      "range": {
        "startLine": 34,
        "startChar": 19,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60865d22_60ae16f0",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T02:42:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "578058d3_6bdbd4c5",
      "range": {
        "startLine": 34,
        "startChar": 19,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26a47eff_df93ded3",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-02-23T01:06:50Z",
      "side": 1,
      "message": "just forward handler?",
      "range": {
        "startLine": 64,
        "startChar": 8,
        "endLine": 65,
        "endChar": 24
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e875d8c_364903e4",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T01:57:11Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "26a47eff_df93ded3",
      "range": {
        "startLine": 64,
        "startChar": 8,
        "endLine": 65,
        "endChar": 24
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0861bf72_e9ffbc89",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T02:42:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e875d8c_364903e4",
      "range": {
        "startLine": 64,
        "startChar": 8,
        "endLine": 65,
        "endChar": 24
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}