{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1cd09189_6ae02706",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-05T16:02:37Z",
      "side": 1,
      "message": "What is the utility of this?  Why would you need to get the value of a local property from within the same server?",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 11,
        "endChar": 29
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d53b4da1_6c15d4f3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2023-07-06T05:08:40Z",
      "side": 1,
      "message": "The \"asio\" code in sdbusplus hide the property value in internal callbable object, and thus the property can not be directly accessed like how \"non-asio\" code does.\nSo it has `setter` function but does not have a `getter` function.\n\nFor an asio service, it could easily set a property, but could not get it back.\nAdding the `getter` function helps in such case.",
      "parentUuid": "1cd09189_6ae02706",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 11,
        "endChar": 29
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73a6d4c2_1d05fcc5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-07T03:22:22Z",
      "side": 1,
      "message": "you haven’t really explained WHY a getter helps.  what is the use case where registering your own getter/setter callback attached to an internal parameter doesn’t solve the problem?\n\nalso, you can “get it back” if you’re writing your own callback functions that point to internal state parameters, which I’d expect the app to be doing in this case.",
      "parentUuid": "d53b4da1_6c15d4f3",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 11,
        "endChar": 29
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "479784b3_c402e8b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-05T16:02:37Z",
      "side": 1,
      "message": "@Vernon / @Ed - please weigh in.  I don\u0027t have a lot of opinion on the ASIO code.",
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17fb735a_f41b9b2b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-06T16:35:50Z",
      "side": 1,
      "message": "Is there any example of how this would be used in a real scenario?  The pattern I would expect would be to register a getter function and have that getter sourced by whatever data you want within the applications class, not to have sdbusplus take ownership of the property, just to have it read out again.  Having multiple sources of truth is messy, and the application should know what the state of a property is within its own state, not having to rely on the dbus interface.",
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e964ce99_72a20a18",
        "filename": "include/sdbusplus/asio/object_server.hpp",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-06T16:35:50Z",
      "side": 1,
      "message": "Accepting by std::any is a mediocre api, because it doesn\u0027t handle errors well.  Coding errors become runtime errors instead of compile time.  We do it for get_property because of history, and because accepting by std::any is better than the template parameter that preceeded it, but still leaves a lot to be desired.\n\nIf we MUST have this feature (which I\u0027m not sure we do) I\u0027d much rather that the register_property interface returned an object that could be then used to interact with the property itself, and that object could be template typed the same as the property itself, rather than having to accept std::any.",
      "range": {
        "startLine": 43,
        "startChar": 22,
        "endLine": 43,
        "endChar": 32
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}