{
  "comments": [
    {
      "key": {
        "uuid": "6eb64e82_9c6138f7",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-12-15T22:24:18Z",
      "side": 1,
      "message": "So we cannot pass an existing std::function by lvalue reference. Probably an inconsequential restriction.",
      "range": {
        "startLine": 24,
        "startChar": 65,
        "endLine": 24,
        "endChar": 67
      },
      "revId": "68f7db95da145322f519b8712de3c897a8a5aceb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9cb569f_f877e562",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-16T00:12:56Z",
      "side": 1,
      "message": "As a general rule, we can\u0027t do that anyway, because the lvalue reference is on stack, and the stack is going to be destroyed as part of the async callback, so the two ways to capture std::function are by value or by rvalue move, so we can take ownership of the callback.",
      "parentUuid": "6eb64e82_9c6138f7",
      "range": {
        "startLine": 24,
        "startChar": 65,
        "endLine": 24,
        "endChar": 67
      },
      "revId": "68f7db95da145322f519b8712de3c897a8a5aceb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1be3348_ba7a4cb2",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-12-16T02:46:44Z",
      "side": 1,
      "message": "That\u0027s not necessarily true. Someone may have e.g. a (static) container of std::function callbacks and they want to pass one into here. In the previous code an lvalue reference would have been happily copied into the async_method_call lambda. Again, probably inconsequential.",
      "parentUuid": "d9cb569f_f877e562",
      "range": {
        "startLine": 24,
        "startChar": 65,
        "endLine": 24,
        "endChar": 67
      },
      "revId": "68f7db95da145322f519b8712de3c897a8a5aceb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bd822cc_d860464e",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-12-15T22:24:18Z",
      "side": 1,
      "message": "nit: any reason we don\u0027t start using std::error_code? Mixing the two will result in some extra copies, but otherwise they seem seamlessly convertible.",
      "range": {
        "startLine": 29,
        "startChar": 39,
        "endLine": 29,
        "endChar": 64
      },
      "revId": "68f7db95da145322f519b8712de3c897a8a5aceb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54b6cc79_f8008a53",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-16T00:12:56Z",
      "side": 1,
      "message": "We didn\u0027t use it originally because boost asio uses boost::system::error_code, so ideally we make all of our async asio calls consistent.  With that said, I think there\u0027s a way to convert one to the other, so in theory we could move all of sdbusplus asio over to std::error_code, but I think that\u0027s probably more work than it\u0027s worth.\n\nstd::error_code is also annoying because it doesn\u0027t support implicit cast to boolean, so instead of writing \nif (ec){\n   // error is set\n}\n\nyou have to write\n\nif (ec !\u003d std::errc()){\n   /// error is set\n}\n\nWhich is a little more subtle IMO, but it\u0027s all just preference.",
      "parentUuid": "3bd822cc_d860464e",
      "range": {
        "startLine": 29,
        "startChar": 39,
        "endLine": 29,
        "endChar": 64
      },
      "revId": "68f7db95da145322f519b8712de3c897a8a5aceb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e7399ad_02f60160",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-12-16T02:46:44Z",
      "side": 1,
      "message": "I only took a cursory look into sdbusplus::asio but it looks like we are the ones choosing to use boost::system::error_code, rather than being imposed by boost::asio. So maybe the whole stack could be changed.\n\nUnless I\u0027m misunderstanding, std::error_code does have an `operator bool` (to make that code example work) and boost::system::error_code has the requisite constructor and `operator std::error_code` to make them seamlessly interchangeable. I tested this patch by calling getProperty with a handler that takes a std::error_code and it seems to work fine. It\u0027s slightly inefficient to mix them like this, but otherwise seems fine.",
      "parentUuid": "54b6cc79_f8008a53",
      "range": {
        "startLine": 29,
        "startChar": 39,
        "endLine": 29,
        "endChar": 64
      },
      "revId": "68f7db95da145322f519b8712de3c897a8a5aceb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}