{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "680d03e3_1ad49be1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-03-18T16:35:01Z",
      "side": 1,
      "message": "One case which appears to be unhandled by this proposal is the use of `async::server_t` to combine multiple objects together.  I don\u0027t want to see us omit that case.  (Maybe I\u0027m missing something here but it doesn\u0027t appear to be handled).",
      "revId": "8717d8734764d7b8945ba8fa75464d232ac4512a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecc2f421_68c572b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-03-20T11:06:30Z",
      "side": 1,
      "message": "Had a look for any usages of ```async::server_t``` and found it only in sdbusplus itself.\n\nhttps://github.com/search?q\u003dorg%3Aopenbmc%20async%3A%3Aserver_t\u0026type\u003dcode\n\nWhen i want to combine multiple objects together to expose multiple dbus interfaces, i tend to use multiple inheritance or just create a class member for each dbus interface.\n\nWhat\u0027s the use-case for creating this combined object, which cannot be achieved otherwise?\n\nWould it simplify the codegen if the possibility was dropped entirely?\n\n\nAlternatively, if you think that possibility is important, should i create a testcase for it? Do you have any example i can look at?",
      "parentUuid": "680d03e3_1ad49be1",
      "revId": "8717d8734764d7b8945ba8fa75464d232ac4512a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "620777e6_2885ebd7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-04-14T12:12:46Z",
      "side": 1,
      "message": "Ok, looks like this possibility is already used in patches\n\nhttps://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75329/64/src/leakdetector/LeakGPIODetector.hpp Line 31\n\n```\n\nusing DetectorIntf \u003d sdbusplus::async::server_t\u003c\n    GPIODetector,\n    sdbusplus::aserver::xyz::openbmc_project::association::Definitions,\n    sdbusplus::aserver::xyz::openbmc_project::state::leak::Detector\u003e;\n```",
      "parentUuid": "ecc2f421_68c572b5",
      "revId": "8717d8734764d7b8945ba8fa75464d232ac4512a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b55eec3_4477d5fa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-03-18T16:35:01Z",
      "side": 1,
      "message": "nit: fix",
      "range": {
        "startLine": 45,
        "startChar": 121,
        "endLine": 45,
        "endChar": 248
      },
      "revId": "8717d8734764d7b8945ba8fa75464d232ac4512a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e0c1186_b6960e8c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-03-20T11:06:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b55eec3_4477d5fa",
      "range": {
        "startLine": 45,
        "startChar": 121,
        "endLine": 45,
        "endChar": 248
      },
      "revId": "8717d8734764d7b8945ba8fa75464d232ac4512a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49391927_aead9f8b",
        "filename": "tools/sdbusplus/templates/interface.aserver.hpp.mako",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-03-18T16:35:01Z",
      "side": 1,
      "message": "Can we get the PropType from the `Instance` type directly?  It doesn\u0027t seem like it actually needs to be a template parameter because the code on line 55 isn\u0027t using a template parameter.",
      "range": {
        "startLine": 27,
        "startChar": 45,
        "endLine": 27,
        "endChar": 129
      },
      "revId": "8717d8734764d7b8945ba8fa75464d232ac4512a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8018a4b_58b0a057",
        "filename": "tools/sdbusplus/templates/interface.aserver.hpp.mako",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-03-20T11:06:30Z",
      "side": 1,
      "message": "Not sure. Line 55 is a different story IMO because\n\n```\nclass ${interface.classname} :\n    public sdbusplus::common::${interface.cppNamespacedClass()},\n```\n\nand common provides the ```properties_t```.\n\n```struct ${interface.classname}``` inherits from ```details::${interface.classname}``` but that is only pre-declared at that point.\n\nSo we cannot us it to access the properties.\n\nAnd ```Instance``` by itself is just a template parameter at that point, right?",
      "parentUuid": "49391927_aead9f8b",
      "range": {
        "startLine": 27,
        "startChar": 45,
        "endLine": 27,
        "endChar": 129
      },
      "revId": "8717d8734764d7b8945ba8fa75464d232ac4512a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}