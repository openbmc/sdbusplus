{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dfb6b54d_5c268ce2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-08-18T11:23:50Z",
      "side": 1,
      "message": "Could be better to add some notes/docs to describe the differences between C++20 coroutine and boost asio\u0027s coroutine.",
      "revId": "a31eabe220ec2431f4abbe10d828190d08094f7d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da89e9f5_482a226d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-08-29T14:22:18Z",
      "side": 1,
      "message": "I\u0027m not ready for alignment with boost yet.  Hopefully I\u0027ll get things to the point where this is a straight-forward transition so that existing code written with boost can be ran against the async::context, but I\u0027m not there.",
      "parentUuid": "dfb6b54d_5c268ce2",
      "revId": "a31eabe220ec2431f4abbe10d828190d08094f7d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6114bd5_29e44cc4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001289
      },
      "writtenOn": "2022-08-16T00:48:27Z",
      "side": 1,
      "message": "I\u0027ll have to do more homework on C++20 coroutines to understand this, but it seems ok.",
      "revId": "a31eabe220ec2431f4abbe10d828190d08094f7d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e50a4e7_02c4811f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-08-16T11:59:51Z",
      "side": 1,
      "message": "I\u0027m reworking this to not use libunifex but the proposed wg21_p2300 implementation: https://github.com/brycelelbach/wg21_p2300_std_execution .  Stay tuned.",
      "parentUuid": "e6114bd5_29e44cc4",
      "revId": "a31eabe220ec2431f4abbe10d828190d08094f7d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "054677b4_01ebbf41",
        "filename": "example/coroutine-example.cpp",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-12T09:27:32Z",
      "side": 1,
      "message": "Can it be used together with boost::asio::io_context?\n\nIf it is possible it would be nice to have additional example where there is dbus service like https://github.com/openbmc/sdbusplus/blob/master/example/asio-example.cpp or other. Then match is created for single property, property is changed and match produces some output.",
      "revId": "a31eabe220ec2431f4abbe10d828190d08094f7d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70e32e4e_7d70285a",
        "filename": "example/coroutine-example.cpp",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-12T17:41:57Z",
      "side": 1,
      "message": "\u003e Can it be used together with boost::asio::io_context?\n\nNot yet.  Hopefully as I implement this feature a little more we can figure out how to integrate it with the asio::io_context so there is a relatively smooth transition between coroutines and the current callback implementation.\n\n\u003e If it is possible it would be nice to have additional example where there is dbus service...\n\nI\u0027ll look if that is relevant to the code in the current state.  There is quite a bit more work to do here anyhow.",
      "parentUuid": "054677b4_01ebbf41",
      "revId": "a31eabe220ec2431f4abbe10d828190d08094f7d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0dff3bd5_4c098b16",
        "filename": "example/coroutine-example.cpp",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-21T11:01:15Z",
      "side": 1,
      "message": "Okay. I\u0027m wondering if this should go to different namespace to indicate that this feature is still work in progress. Like experimental, people will be more careful if they decide to use it.",
      "parentUuid": "70e32e4e_7d70285a",
      "revId": "a31eabe220ec2431f4abbe10d828190d08094f7d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f7a3263_2680c24c",
        "filename": "example/coroutine-example.cpp",
        "patchSetId": 5
      },
      "lineNbr": 6,
      "author": {
        "id": 1001289
      },
      "writtenOn": "2022-08-16T00:48:27Z",
      "side": 1,
      "message": "Oh is OpenBMC ok with writing C++ functions using the `auto fn() -\u003e ret` syntax? I didn\u0027t know that, that\u0027s cool.",
      "revId": "a31eabe220ec2431f4abbe10d828190d08094f7d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df06d66d_060d74f4",
        "filename": "example/coroutine-example.cpp",
        "patchSetId": 5
      },
      "lineNbr": 6,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-08-16T11:59:51Z",
      "side": 1,
      "message": "I haven\u0027t seen any guideline one way or the other.\n\nFrom a language perspective it is actually preferred in the some cases.\n\nFor class member types you can save yourself some class scoping by using the trailing type:\n\n    some_class::type some_class::member_fn(...)\n    auto some_class::member_fn(...) -\u003e type",
      "parentUuid": "4f7a3263_2680c24c",
      "revId": "a31eabe220ec2431f4abbe10d828190d08094f7d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03d4bce6_90ab855e",
        "filename": "src/async/context.cpp",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 1001289
      },
      "writtenOn": "2022-08-16T00:48:27Z",
      "side": 1,
      "message": "\"call it cannot\"? Maybe this was supposed to be \"it cannot call\"?",
      "revId": "a31eabe220ec2431f4abbe10d828190d08094f7d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3b21e8c_ef602743",
        "filename": "src/async/context.cpp",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-08-16T11:59:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "03d4bce6_90ab855e",
      "revId": "a31eabe220ec2431f4abbe10d828190d08094f7d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}