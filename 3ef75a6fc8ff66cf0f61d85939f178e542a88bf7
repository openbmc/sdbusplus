{
  "comments": [
    {
      "key": {
        "uuid": "1f627371_1180d279",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-11T18:00:49Z",
      "side": 1,
      "message": "Complete nitpick, and might not change anything, but I wonder if this is the reason the binaries are bigger than patchset one.  This template is going to duplicate the function for both const and non-const parameters.  I wonder if we put a std::decay_t\u003cT\u003e here if we\u0027d get closer to the same binary size as the type erased version?\n\nJust a guess, doesn\u0027t need to be done, I still think this patchset is good enough as-is.",
      "range": {
        "startLine": 24,
        "startChar": 62,
        "endLine": 24,
        "endChar": 63
      },
      "revId": "3ef75a6fc8ff66cf0f61d85939f178e542a88bf7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ad006bf_5f176f06",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-12-13T07:45:45Z",
      "side": 1,
      "message": "It\u0027s not likely because all use cases are like this:\ngetProperty\u003cstd::string\u003e, getProperty\u003cbool\u003e.\n\nBefore this change T was explicitly provided by user, all tested use cases follow this pattern result should be the same. To void duplicated templates I would simply add static assert:\n\nstatic_assert(std::is_same_v\u003cT, std::decay_t\u003cT\u003e\u003e);\n\nIt\u0027s backward compatible and we will avoid creating additional templates by accident.",
      "parentUuid": "1f627371_1180d279",
      "range": {
        "startLine": 24,
        "startChar": 62,
        "endLine": 24,
        "endChar": 63
      },
      "revId": "3ef75a6fc8ff66cf0f61d85939f178e542a88bf7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3d0abc7_89306652",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-12-13T08:05:11Z",
      "side": 1,
      "message": "I added static assert to ensure there wont be any duplicates. Everything compiles, T was always explicitly passed (previous signature didn\u0027t allow it to be deduced).",
      "parentUuid": "1ad006bf_5f176f06",
      "range": {
        "startLine": 24,
        "startChar": 62,
        "endLine": 24,
        "endChar": 63
      },
      "revId": "3ef75a6fc8ff66cf0f61d85939f178e542a88bf7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6865dd5e_bd3541a9",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-13T16:46:48Z",
      "side": 1,
      "message": "Ah, good point.  That makes sense.",
      "parentUuid": "e3d0abc7_89306652",
      "range": {
        "startLine": 24,
        "startChar": 62,
        "endLine": 24,
        "endChar": 63
      },
      "revId": "3ef75a6fc8ff66cf0f61d85939f178e542a88bf7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0195697_1020669f",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-12-15T22:24:18Z",
      "side": 1,
      "message": "It still cannot be deduced, right? At least, it couldn\u0027t in my tests. I would like to avoid specifying the \u003cT\u003e if it were simple to fix.",
      "parentUuid": "6865dd5e_bd3541a9",
      "range": {
        "startLine": 24,
        "startChar": 62,
        "endLine": 24,
        "endChar": 63
      },
      "revId": "3ef75a6fc8ff66cf0f61d85939f178e542a88bf7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8101f5cc_f03f610b",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-16T00:12:56Z",
      "side": 1,
      "message": "AH, that\u0027s a good point too if we can no longer deduce it.",
      "parentUuid": "b0195697_1020669f",
      "range": {
        "startLine": 24,
        "startChar": 62,
        "endLine": 24,
        "endChar": 63
      },
      "revId": "3ef75a6fc8ff66cf0f61d85939f178e542a88bf7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ef532ea_9af18048",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-16T03:14:44Z",
      "side": 1,
      "message": "I\u0027m surprised type-deduction doesn\u0027t work here.  Was this with C++20?\n\nOne thing we could try would be to change the template parameters to be:\n\n    template \u003ctypename T, typename Handler \u003d std::function\u003cvoid(boost::system::error_code, T)\u003e\n\nThis might help with the deduction if it doesn\u0027t work as-is.",
      "parentUuid": "8101f5cc_f03f610b",
      "range": {
        "startLine": 24,
        "startChar": 62,
        "endLine": 24,
        "endChar": 63
      },
      "revId": "3ef75a6fc8ff66cf0f61d85939f178e542a88bf7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}