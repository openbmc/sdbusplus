{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1cd09189_6ae02706",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-05T16:02:37Z",
      "side": 1,
      "message": "What is the utility of this?  Why would you need to get the value of a local property from within the same server?",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 11,
        "endChar": 29
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d53b4da1_6c15d4f3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2023-07-06T05:08:40Z",
      "side": 1,
      "message": "The \"asio\" code in sdbusplus hide the property value in internal callbable object, and thus the property can not be directly accessed like how \"non-asio\" code does.\nSo it has `setter` function but does not have a `getter` function.\n\nFor an asio service, it could easily set a property, but could not get it back.\nAdding the `getter` function helps in such case.",
      "parentUuid": "1cd09189_6ae02706",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 11,
        "endChar": 29
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73a6d4c2_1d05fcc5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-07T03:22:22Z",
      "side": 1,
      "message": "you haven’t really explained WHY a getter helps.  what is the use case where registering your own getter/setter callback attached to an internal parameter doesn’t solve the problem?\n\nalso, you can “get it back” if you’re writing your own callback functions that point to internal state parameters, which I’d expect the app to be doing in this case.",
      "parentUuid": "d53b4da1_6c15d4f3",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 11,
        "endChar": 29
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3a065ac_a144115e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2023-07-07T05:27:44Z",
      "side": 1,
      "message": "\u003e What is the use case where registering your own getter/setter callback attached to an internal parameter doesn’t solve the problem?\n\nFor a client that makes dbus calls, that\u0027s OK, it always needs to make a DBus call to get and set a property.\n\nFor a service that implements an interface, there is no such `getter` function at all.\nE.g. check below code in a service:\n\n // In some function it sets a value\n iface-\u003eset_property(propertyName, xxx);\n ...\n // In other functions it tries to get the value\n // But there is no such getter function!\n auto value \u003d ifase-\u003eget_property(propertyName);\n \nThis patch adds such `getter`. Otherwise, the code where needs to get a property will have to \"save\" the value in other data structure.",
      "parentUuid": "73a6d4c2_1d05fcc5",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 11,
        "endChar": 29
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58ca25b1_aa3a0fa8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-07T20:13:36Z",
      "side": 1,
      "message": "\u003e For a service that implements an interface, there is no such getter function at all.\n\n\nRight, the application provides its own getter, with register_property_r(), and have the callback point to your local copy of the variable.\n\nI\u0027m assuming in your application you\u0027re using the register_property_r overload that takes PropertyType as an argument, not the overload that takes CallbackTypeGet as an argument.  The former is really only intended for parameter that won\u0027t change after the interface is instantiated.\n\nOverload that\u0027s being used right now:\nhttps://github.com/openbmc/sdbusplus/blob/fa663aec1ec21036f972318cb9cd59b3623f7afd/include/sdbusplus/asio/object_server.hpp#L402\n\nOverload that should be used to attach a reference to your parameter either through a lambda object, or std::bind_front():\nhttps://github.com/openbmc/sdbusplus/blob/fa663aec1ec21036f972318cb9cd59b3623f7afd/include/sdbusplus/asio/object_server.hpp#L434\n\n\n\u003e // In other functions it tries to get the value\n\nThis would imply that you\u0027re trying to use the dbus interface as an abstraction for two modules to share state, which is a generalized anti-pattern.  One object should own the dbus interface state, and any communication with other modules should happen in application code without any mention of dbus.  This prevents a lot of abstraction issues.\n\nAgain, please provide the code that is using this, so we can give more concrete direction, but overall, I do not believe this getter function is worthwhile, and it prevents us from making the set_property() abstraction more efficient in the future (which was my intent).",
      "parentUuid": "a3a065ac_a144115e",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 11,
        "endChar": 29
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c494f30_2f2b123c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2023-07-10T05:19:59Z",
      "side": 1,
      "message": "\u003e Right, the application provides its own getter, with register_property_r(), and have the callback point to your local copy of the variable.\n\nThis assumes and forces the service/application to have a **local copy** of the variable.\nThe purpose for this patch is to provide the capability for a service to not save the **local copy**.\nCompare to the non-asio sdbusplus service:\n* A service that implements a generated \"server.hpp\" get the property in its base class, and thus it does not need to save a local copy at all. It could use the variable defined in server.hpp directly, and there is **only one instance** for the property.\n* Current asio service does not have such capability, a service will have to save a local copy of a property, and make sure it is synced in the getter and setter\u0027s callbacks.\n\n\u003e This would imply that you\u0027re trying to use the dbus interface as an abstraction for two modules to share state, which is a generalized anti-pattern.\n\nNope, my case is as simple as above, that one service implements a interface and holds a property, it is better to have both setter and getter, instead of only a setter.\n\n\u003e Again, please provide the code that is using this, so we can give more concrete direction.\n\nThe code is already shows in the above demo, it\u0027s pretty simple.\n\n\u003e I do not believe this getter function is worthwhile, and it prevents us from making the set_property() abstraction more efficient in the future (which was my intent).\n\nCould you elaborate how to improve the set_property() to a more efficient way? And then we could discuss how to get a more efficient get_property() as well.",
      "parentUuid": "58ca25b1_aa3a0fa8",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 11,
        "endChar": 29
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e05d496_08a3d6bd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-10T16:14:48Z",
      "side": 1,
      "message": "Please reply with the code that does this in one of the openbmc applications.\n\n\u003e to have a local copy of the variable.\n\nYep.  Applications having a local copy of a variable is how this was set up.  The code for adding a property directly was only for properties that realistically don\u0027t change.  You seem to imply that having a local copy of a variable is a problem, but I\u0027m not really sure why.\n\n\nGetting an example of this in an application will help quite a bit I think.  Please provide the example, and we can go from there.",
      "parentUuid": "5c494f30_2f2b123c",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 11,
        "endChar": 29
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "479784b3_c402e8b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-05T16:02:37Z",
      "side": 1,
      "message": "@Vernon / @Ed - please weigh in.  I don\u0027t have a lot of opinion on the ASIO code.",
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17fb735a_f41b9b2b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-06T16:35:50Z",
      "side": 1,
      "message": "Is there any example of how this would be used in a real scenario?  The pattern I would expect would be to register a getter function and have that getter sourced by whatever data you want within the applications class, not to have sdbusplus take ownership of the property, just to have it read out again.  Having multiple sources of truth is messy, and the application should know what the state of a property is within its own state, not having to rely on the dbus interface.",
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60f32c8b_c46d7d35",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-10T16:14:48Z",
      "side": 1,
      "message": "still no reply to this.",
      "parentUuid": "17fb735a_f41b9b2b",
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de40e97d_7a5041ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2023-12-05T11:47:27Z",
      "side": 1,
      "message": "The \"sync\" API and the new \"async\" API with c++ co-routine both have the equivalent set/get property APIs.\nI do not see a reason why it\u0027s not accepted for the \"asio\" APIs.",
      "parentUuid": "60f32c8b_c46d7d35",
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e964ce99_72a20a18",
        "filename": "include/sdbusplus/asio/object_server.hpp",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-06T16:35:50Z",
      "side": 1,
      "message": "Accepting by std::any is a mediocre api, because it doesn\u0027t handle errors well.  Coding errors become runtime errors instead of compile time.  We do it for get_property because of history, and because accepting by std::any is better than the template parameter that preceeded it, but still leaves a lot to be desired.\n\nIf we MUST have this feature (which I\u0027m not sure we do) I\u0027d much rather that the register_property interface returned an object that could be then used to interact with the property itself, and that object could be template typed the same as the property itself, rather than having to accept std::any.",
      "range": {
        "startLine": 43,
        "startChar": 22,
        "endLine": 43,
        "endChar": 32
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bc67f24_b5bba625",
        "filename": "include/sdbusplus/asio/object_server.hpp",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2023-12-05T11:47:27Z",
      "side": 1,
      "message": "The \"set_property\" API uses std::any as well, this is how current set/get property APIs implemented.",
      "parentUuid": "e964ce99_72a20a18",
      "range": {
        "startLine": 43,
        "startChar": 22,
        "endLine": 43,
        "endChar": 32
      },
      "revId": "d7d27a74c3157913684f962fdefe3a5d693a6750",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}