{
  "comments": [
    {
      "key": {
        "uuid": "6f4d3cc1_2bbad1e3",
        "filename": "meson.build",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-06-04T11:27:06Z",
      "side": 1,
      "message": "Thanks for this comment.  I understand the situation a lot better after reading this.\n\nI\u0027m concerned about a frustrating experience for someone who might be using the SDK or something like the openbmc-test docker image to do development on this repository.  It is fairly non-obvious to be using tools from outside the repository when they exist in the repository.\n\nIs there something we can do instead to detect a cross-compile situation and only do that in that case?  I think meson gives us that facility.\n\n(I am curious where you ran into this though because we didn\u0027t have the problem with the Yocto build)",
      "revId": "a97b7389d72a0e5e9a8b6442059063b9a4a16f0a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dd4d369_80bfa77a",
        "filename": "meson.build",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2020-06-04T20:28:55Z",
      "side": 1,
      "message": "I think the frustrating experience is something one would end up experiencing with any out of date dependencies. I can see how this is more annoying with repos like sdbusplus in which we iterate our tooling more frequently. However, I think this is mitigated as users stop using the SDK environment and just start running directly with meson on their system or through the CI environment. If they are using bitbake directly the dependencies will always be kept in sync here. In general we should discourage users from installing openbmc dependencies in their build environments unless they are automatically managed, to prevent this kind of staleness.\n\nIt is annoying to have to deal with this in python because python doesn\u0027t really have a concept of packages per architecture. So it is preferred to separate native tooling and isolate its usage of python packages, allowing the build to have its own python packages that are intended to allow references in installed scripting. I\u0027m not 100% sure why this doesn\u0027t affect yocto, but I think it is lax in that it allows native and cross python dependencies to be mixed as long as they end up working.",
      "parentUuid": "6f4d3cc1_2bbad1e3",
      "revId": "a97b7389d72a0e5e9a8b6442059063b9a4a16f0a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beb0738d_ef1b8330",
        "filename": "meson.build",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-06-05T03:17:51Z",
      "side": 1,
      "message": "My 2 cents with sdbusplus:\nFor automation, I always use docker from openbmc-test-automation.\nFor development, I\u0027d like to use OpenBMC SDK whenever possible\nIn some cases where SDK does not work, I have to work in yocto environment (e.g. devtool xxx)\n\nBut I know there are projects outside openbmc are using sdbusplus as well, so I am OK with changes that helps others as long as it does not break the SDK/yocto environment.",
      "parentUuid": "9dd4d369_80bfa77a",
      "revId": "a97b7389d72a0e5e9a8b6442059063b9a4a16f0a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6039684_3354ea16",
        "filename": "meson.build",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2020-06-05T03:23:23Z",
      "side": 1,
      "message": "You can definitely still use the SDK environment if you want, you just can\u0027t let the version of sdbus++ lag far enough behind that it breaks your development version of openbmc. We could probably add something to detect that environment if it really bothers people and always uses the vendored copy of sdbus++.\n\nOnce all of the patches on top go in, you won\u0027t really even need the SDK to develop sdbusplus. You can just use meson locally. stdplus, sdeventplus, gpioplus have almost all their dependencies substitutable in meson so you can typically just run `meson build` `meson test -C build` and the tests just build and run.",
      "parentUuid": "beb0738d_ef1b8330",
      "revId": "a97b7389d72a0e5e9a8b6442059063b9a4a16f0a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}