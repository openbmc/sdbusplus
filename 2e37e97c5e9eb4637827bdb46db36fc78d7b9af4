{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8ab26c7e_966e8e2e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2022-09-02T20:37:55Z",
      "side": 1,
      "message": "It\u0027s not needless, it\u0027s correct. Performing an sd_bus_call_async() on a message finalizes it and it can\u0027t be used again. This is a mutation of the message so it\u0027s a bit surprising it would work on a const message.",
      "revId": "2e37e97c5e9eb4637827bdb46db36fc78d7b9af4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13f26bc4_4ac36eb5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T20:43:45Z",
      "side": 1,
      "message": "I’m not sure what you’re getting at.\n\nThe type of msg in the lambda here is “const message_t”, even though it was “moved” into the lambda, because all lambda captures are by default const.  Previously it was impossible to get the pointer out of it, no matter how you were using it.",
      "parentUuid": "8ab26c7e_966e8e2e",
      "revId": "2e37e97c5e9eb4637827bdb46db36fc78d7b9af4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b99dab7_2ff0d2db",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2022-09-02T21:21:47Z",
      "side": 1,
      "message": "Being able to run `sd_bus_call_async` on a `const message_t` is incorrect as it modifies the underlying `sd_bus_message`. You should be using a mutable lambda in this case.",
      "parentUuid": "13f26bc4_4ac36eb5",
      "revId": "2e37e97c5e9eb4637827bdb46db36fc78d7b9af4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}