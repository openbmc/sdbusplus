{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d33f05fd_b6951ddc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-04T08:24:30Z",
      "side": 1,
      "message": "a dbus library doesn\u0027t seem like the right place for this, given that we already have code for dealing with dbus fds that don\u0027t require exposing raw apis like this.\n\nThis commit message is also once sentence, so I\u0027m not really going to try to guess why you\u0027re adding it.  Lets get written down what you\u0027re trying to accomplish, and we can go from there, but I really suspect that this isn\u0027t the right place for this generic, non dbus specific code.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 59
      },
      "revId": "38c1755013646cf5559126dc29b99d036d02e7ec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3b76b86_c500b2bd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-12T22:03:06Z",
      "side": 1,
      "message": "Ideally either:\n   1. stdexec would handle sd_events\n   2. we would have a separate library to make sd_events async.\n\n(1) isn\u0027t the case today and isn\u0027t likely to be the case.\n(2) would require we split out a bunch of stuff around stdexec into a separate library that sdbusplus could build on top of, since sdbusplus also needs to handle some sd_events async code.\n\nI know there is sdeventplus; maybe this could live there.  We already have some existing sd_event and timer support in this library, so I don\u0027t think leveraging that was a big stretch.  It seems like fairly minor code that I\u0027m relatively ok with it living here for the time being until this space matures more.",
      "parentUuid": "d33f05fd_b6951ddc",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 59
      },
      "revId": "38c1755013646cf5559126dc29b99d036d02e7ec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ab93110_cadaa67c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-11-16T19:00:33Z",
      "side": 1,
      "message": "\u003e This commit message is also once sentence, so I\u0027m not really going to try to guess why you\u0027re adding it.\n\nAdded some more details to the description.",
      "parentUuid": "f3b76b86_c500b2bd",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 59
      },
      "revId": "38c1755013646cf5559126dc29b99d036d02e7ec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ec4c444_8d2a4549",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-25T20:59:58Z",
      "side": 1,
      "message": "Could this have been addressed before merge?  I find it unlikely that we\u0027ll ever clean this up, and doing this same pattern of allowing things to rely on classes put in the wrong location in the past (timers, cough) has caused the project pain.  How can we follow up to make sure that this will get moved to stdexec in the future?",
      "parentUuid": "2ab93110_cadaa67c",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 59
      },
      "revId": "38c1755013646cf5559126dc29b99d036d02e7ec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11278403_8d62a20c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T21:22:24Z",
      "side": 1,
      "message": "What would you like addressed?\n\nI don\u0027t think stdexec would ever support sd-event directly; stdexec is intended to be much more portable than that.",
      "parentUuid": "6ec4c444_8d2a4549",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 59
      },
      "revId": "38c1755013646cf5559126dc29b99d036d02e7ec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04a6e960_94fd384b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T01:00:42Z",
      "side": 1,
      "message": "That a generic FD object isn\u0027t really an interface a dbus library should be publishing.  If we want to support sd-timer, we have classes for that that can be added to without having to expose a primitive object.",
      "parentUuid": "11278403_8d62a20c",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 59
      },
      "revId": "38c1755013646cf5559126dc29b99d036d02e7ec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2cb8a58_d25b1092",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-26T02:09:56Z",
      "side": 1,
      "message": "Which other repository do you feel this belongs in?\n\nsdbusplus has had code for interfacing with sd_event for a long time (even before the async code).  Someone added a \u0027Timer\u0027 class about 6 years ago now.  When I added the async code, I added \u0027wait_for\u0027 (an async equivalent to Timer) because it was necessary for porting similar daemons.\n\nThe code in this commit might seem large but it is almost all boilerplate that stdexec requires for creating a send/receiver; there ends up being only about 3 real lines of code that aren\u0027t already trivially implemented on top of the existing sd_event support.\n\nhttps://github.com/openbmc/sdbusplus/blob/master/src/async/fdio.cpp#L7-L15\n\nI agree this \"isn\u0027t dbus\" but sd-bus itself is built on top of sd-event and we have to support sd-event anyhow.  Maybe you could argue that this belongs in sdeventplus, but it would be significantly more complex to try to spread the event loop implementation across both of these repos.  I don\u0027t really see the benefit of that.",
      "parentUuid": "04a6e960_94fd384b",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 59
      },
      "revId": "38c1755013646cf5559126dc29b99d036d02e7ec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf4896ea_746eef5e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T02:26:54Z",
      "side": 1,
      "message": "\u003e Which other repository do you feel this belongs in?\n\nstdplus already has an FD so that might be a good place to start (or at least ask William what his opinion is).  I\u0027m not sure that\u0027s not the overall right place, but at least there it doesn\u0027t duplicate things.  std::exec seems like the overall right place.  Has that topic been broached?\n\n\u003e \n\u003e sdbusplus has had code for interfacing with sd_event for a long time (even before the async code).  Someone added a \u0027Timer\u0027 class about 6 years ago now.  When I added the async code, I added \u0027wait_for\u0027 (an async equivalent to Timer) because it was necessary for porting similar daemons.\n\u003e \n\u003e The code in this commit might seem large but it is almost all boilerplate that stdexec requires for creating a send/receiver; there ends up being only about 3 real lines of code that aren\u0027t already trivially implemented on top of the existing sd_event support.\n\u003e \n\u003e https://github.com/openbmc/sdbusplus/blob/master/src/async/fdio.cpp#L7-L15\n\u003e \n\u003e I agree this \"isn\u0027t dbus\" but sd-bus itself is built on top of sd-event and we have to support sd-event anyhow.  Maybe you could argue that this belongs in sdeventplus, but it would be significantly more complex to try to spread the event loop implementation across both of these repos.  I don\u0027t really see the benefit of that.\n\n\nMaybe that\u0027s the distinction?  This object wasn\u0027t really meant to be part of the public interface, and that could just be fixed to not be published?  If all the was exposed in the public interface was sd-event, and related objects, that seems fine and reasonable.  As written, it\u0027s being used in the public interface to read gpio.  Needing sdbusplus to read a gpio seems like a design anti-pattern.",
      "parentUuid": "d2cb8a58_d25b1092",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 59
      },
      "revId": "38c1755013646cf5559126dc29b99d036d02e7ec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}