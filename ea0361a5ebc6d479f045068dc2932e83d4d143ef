{
  "comments": [
    {
      "key": {
        "uuid": "b32732be_0cc6caa4",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-04-01T02:30:21Z",
      "side": 1,
      "message": "The manpage suggests that if (r \u003d\u003d 0), out is still nullptr.",
      "revId": "ea0361a5ebc6d479f045068dc2932e83d4d143ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75d50b5e_7605af76",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-04-01T02:30:21Z",
      "side": 1,
      "message": "Leaked \u0027out\u0027, I think.\n\nWow... it appears like our CI even caught this:\n\n\u001b[1;31m\u003e\u003e\u003e \u001b[0mMALLOC_PERTURB_\u003d171 /home/jenkins-op/workspace/ci-repository/openbmc/sdbusplus/build/test/test-message_types",
      "revId": "ea0361a5ebc6d479f045068dc2932e83d4d143ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b2e40cd_b3422f78",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-04-01T02:30:21Z",
      "side": 1,
      "message": "It might be clearer to do `this-\u003eoperator/(extId.c_str())`.  I\u0027m not sure.  I had to think a moment about what type \u0027*this\u0027 was and what this ended up doing.  Maybe I\u0027m just being dense.",
      "revId": "ea0361a5ebc6d479f045068dc2932e83d4d143ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84474609_2622dc79",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-04-01T02:30:21Z",
      "side": 1,
      "message": "It maybe better to do what systemd itself does on this.  There is a subtle case where if 185 throws an exception we end up with a leak.  Not likely to happen though.\n\n\n  static inline void freep(void *p) {\n        *(void**)p \u003d mfree(*(void**) p);\n  }\n\n  #define _cleanup_free_ _cleanup_(freep)\n  #define _cleanup_(x) __attribute__((__cleanup__(x)))\n\nThey\u0027re basically defining a C-ish RAII.  I thought we had something like that for file-descriptors already (which could be adopted to free) but I\u0027m not seeing it in this codebase.  I think you\u0027d have to use unique_ptr with a custom deleter class that calls free instead.",
      "revId": "ea0361a5ebc6d479f045068dc2932e83d4d143ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}