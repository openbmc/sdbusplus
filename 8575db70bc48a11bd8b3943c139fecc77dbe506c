{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d537bbcc_071ecc05",
        "filename": "include/sdbusplus/event.hpp",
        "patchSetId": 4
      },
      "lineNbr": 91,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-05T13:29:55Z",
      "side": 1,
      "message": "I\u0027ve read the commit message but I don\u0027t understand why we\u0027d want to do this.  We\u0027ve gone from using a pretty standard type to now using our own type.  That means that we similarly can\u0027t use `5 ms` and have it automatically do the right thing because there would be an implicit cast from unsigned to signed.\n\nDo you have some examples where this improves the ergonomics of using this?",
      "revId": "8575db70bc48a11bd8b3943c139fecc77dbe506c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c18befa_d3d24269",
        "filename": "include/sdbusplus/event.hpp",
        "patchSetId": 4
      },
      "lineNbr": 91,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2023-01-05T13:45:51Z",
      "side": 1,
      "message": "Well, systemd internally uses uint64_t. I did this same thing for sdeventplus and it doesn\u0027t hamper typical implicit conversions.\n\nhttps://github.com/openbmc/sdeventplus/blob/dce7381a71d1b62ed16f001a73824fd486243cf2/src/sdeventplus/types.hpp#L9",
      "parentUuid": "d537bbcc_071ecc05",
      "revId": "8575db70bc48a11bd8b3943c139fecc77dbe506c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b539daa_6980116f",
        "filename": "include/sdbusplus/event.hpp",
        "patchSetId": 4
      },
      "lineNbr": 91,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-01-05T16:44:03Z",
      "side": 1,
      "message": "The biggest motivator is clang warns on this, because in theory if you loaded std::chrono::milliseconds(-4), it would overflow into a large positive number.  Does it matter?  probably not, but considering systemd uses uint64_t, and this isn\u0027t used anywhere, I expected this to not have any impact.\n\nAlternatively, I could static_cast\u003cuint64_to\u003e or a duration_cast to this to shut up clang, but it\u0027d still be wrong for boundary values, and this seemed better.  Happy to do whatever.",
      "parentUuid": "0c18befa_d3d24269",
      "revId": "8575db70bc48a11bd8b3943c139fecc77dbe506c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df684c41_897924e3",
        "filename": "include/sdbusplus/event.hpp",
        "patchSetId": 4
      },
      "lineNbr": 91,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-05T17:38:20Z",
      "side": 1,
      "message": "Aren\u0027t you only not seeing an issue in clang because of the commit right above it that disables all users of this code?",
      "parentUuid": "6b539daa_6980116f",
      "revId": "8575db70bc48a11bd8b3943c139fecc77dbe506c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc6bb992_438458c6",
        "filename": "include/sdbusplus/event.hpp",
        "patchSetId": 4
      },
      "lineNbr": 91,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-05T17:45:12Z",
      "side": 1,
      "message": "I\u0027d prefer you disable event.cpp in the preceding commit as well for now and I can unwind this with that work (and then leave this file as-is).  I should probably add something into event.cpp to detect negative durations.",
      "parentUuid": "df684c41_897924e3",
      "revId": "8575db70bc48a11bd8b3943c139fecc77dbe506c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05edcae8_7c289d41",
        "filename": "include/sdbusplus/server/transaction.hpp",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-05T13:29:55Z",
      "side": 1,
      "message": "This is a functional change now.  You\u0027ve gone from getting the current time to now setting the time to 0.",
      "revId": "8575db70bc48a11bd8b3943c139fecc77dbe506c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b52b19d4_45393c7e",
        "filename": "include/sdbusplus/server/transaction.hpp",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2023-01-05T13:45:51Z",
      "side": 1,
      "message": "Yeah, I was kinda wondering how this was used in practice given the change.",
      "parentUuid": "05edcae8_7c289d41",
      "revId": "8575db70bc48a11bd8b3943c139fecc77dbe506c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6eae8518_cac9ef2f",
        "filename": "include/sdbusplus/server/transaction.hpp",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-01-05T16:44:03Z",
      "side": 1,
      "message": "ug... good point.  I should\u0027ve thought of that.  Let me poke at it a little more and see if there\u0027s a way to avoid an implicit conversion.",
      "parentUuid": "b52b19d4_45393c7e",
      "revId": "8575db70bc48a11bd8b3943c139fecc77dbe506c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d9200ed_a8414d14",
        "filename": "include/sdbusplus/server/transaction.hpp",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-01-05T17:17:52Z",
      "side": 1,
      "message": "Ok, I left the constructor alone and loaded time as time_t instead of int, which seems better anyway.  The only usage of this stuff seems to be for hashing.",
      "parentUuid": "6eae8518_cac9ef2f",
      "revId": "8575db70bc48a11bd8b3943c139fecc77dbe506c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}