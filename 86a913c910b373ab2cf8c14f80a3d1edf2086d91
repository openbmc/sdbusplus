{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ac7eb9b6_e5d92f84",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2022-03-08T12:20:32Z",
      "side": 1,
      "message": "Seems very useful. All my comments were resolved.",
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "343cbeb6_50d845ed",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 11
      },
      "lineNbr": 13,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-11T22:41:30Z",
      "side": 1,
      "message": "Doesn\u0027t forcing a std::function for a lambda increase the size?",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 13,
        "endChar": 60
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b61baf57_138e8f4e",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 11
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T00:08:13Z",
      "side": 1,
      "message": "I was actually playing with this in the context of some bmcweb callbacks, and it used to be the case a few years ago that templatized callbacks optimized/inlined more aggressively, but with our current set of libc++ and gcc, std::function produced the same code as a templated callback....   I can\u0027t fully explain that one, given that I would\u0027ve expected the templated callback to inline differently given it has the exact type information, but from what I could tell, gcc is able to optimize through a type erased std;:function these days for most cases.",
      "parentUuid": "343cbeb6_50d845ed",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 13,
        "endChar": 60
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64e7e592_24be2f35",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 11
      },
      "lineNbr": 13,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-12T00:27:33Z",
      "side": 1,
      "message": "Ok.",
      "parentUuid": "b61baf57_138e8f4e",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 13,
        "endChar": 60
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c2773f4_9f72b84b",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-11T22:41:30Z",
      "side": 1,
      "message": "I think the fact that \u0027move\u0027 works here means that for l-value references on line 29 we ended up forcing the creation of a temporary std::function.",
      "range": {
        "startLine": 17,
        "startChar": 26,
        "endLine": 17,
        "endChar": 44
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b5b7965_a988b582",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T00:08:13Z",
      "side": 1,
      "message": "Why\u0027s that?  I don\u0027t see it getting used another time?  With that said, I think if we captured the std::function by value on line 13, it would entirely remove the need for the line 23 overload.",
      "parentUuid": "8c2773f4_9f72b84b",
      "range": {
        "startLine": 17,
        "startChar": 26,
        "endLine": 17,
        "endChar": 44
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb4e4d1f_cfd81acf",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-12T00:27:33Z",
      "side": 1,
      "message": "I don\u0027t know what I was thinking.  l-value references can be converted to r-value references without any additional conversion.  I guess there might be a conversion if the T on line 22 is a const\u0026, but that would be the only case.\n\nHaving said that, I\u0027m not sure it is good practice to cast someone\u0027s l-value reference into an r-value reference that you give away somewhere else.  But, if they really wanted no guarantees that it wouldn\u0027t change, it should have been a const\u0026.",
      "parentUuid": "7b5b7965_a988b582",
      "range": {
        "startLine": 17,
        "startChar": 26,
        "endLine": 17,
        "endChar": 44
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58d4a954_5953093d",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T00:08:13Z",
      "side": 1,
      "message": "I kinda think we don\u0027t even want this overload to be possible.  If you\u0027re loading things into a map, then parsing them to known-at-compile-time parameters, you\u0027re doing something that\u0027s inherently wasteful both performance-wise, and binary size-wise compared to just loading them into an unordered structure (ie vector\u003cpair\u003e) before doing the parameter readout.\n\nWe should help the user make the right data structure decisions by disallowing the structures that we know are less efficient and give the same result.  FWIW, I have patches out against bmcweb (one still left to merge of 10 or so) to basically consolidate on making this consistent.",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 56
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32ec1fe1_849ec080",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-12T00:27:33Z",
      "side": 1,
      "message": "I\u0027m not following you here.  Isn\u0027t the Container the stuff that came off the dbus?  This constexpr is just for cases where you\u0027re using a map and not a vector\u003cpair\u003e (flatmap?).",
      "parentUuid": "58d4a954_5953093d",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 56
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4faba27d_e80f374a",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-11T22:41:30Z",
      "side": 1,
      "message": "Why\u0027d you switch this?  Can\u0027t std::begin give a constant-iterator for constant containers?  Or should this have become cbegin?",
      "range": {
        "startLine": 37,
        "startChar": 12,
        "endLine": 37,
        "endChar": 46
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66a7c8d2_934f4684",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 11
      },
      "lineNbr": 48,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T00:08:13Z",
      "side": 1,
      "message": "As written, you\u0027re doing an N^2 loop over the incoming properties, given that findProperty calls find_if (which is the first N), then this is looping over each property (the second N)  maybe this isn\u0027t a huge deal?",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 51
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96604bd8_4e8cd177",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 11
      },
      "lineNbr": 48,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-12T00:27:33Z",
      "side": 1,
      "message": "It is N^2 but it is probably M^2 if you aggregate all the args.  Arguably that\u0027s smaller but the aggregation itself requires dynamic memory.  The number of properties is probably small enough to not worry about it now.",
      "parentUuid": "66a7c8d2_934f4684",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 51
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c2bec44_72b10bf4",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 11
      },
      "lineNbr": 55,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-11T22:41:30Z",
      "side": 1,
      "message": "Do you want std::decay_t instead?  \u0027remove_cv\u0027?",
      "range": {
        "startLine": 55,
        "startChar": 20,
        "endLine": 55,
        "endChar": 39
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ac862bb_8e05a8fd",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 11
      },
      "lineNbr": 66,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-11T22:41:30Z",
      "side": 1,
      "message": "If this decay is useful, put it in is_optional_v.",
      "range": {
        "startLine": 66,
        "startChar": 27,
        "endLine": 66,
        "endChar": 62
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f06e8695_407384a9",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 11
      },
      "lineNbr": 134,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-11T22:41:30Z",
      "side": 1,
      "message": "Is this function used anywhere?  Doesn\u0027t seem like it.",
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f7518d8_4c534d92",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 11
      },
      "lineNbr": 155,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-11T22:41:30Z",
      "side": 1,
      "message": "Should we add an assert string on this?",
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94c22787_95765aaf",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 11
      },
      "lineNbr": 172,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-11T22:41:30Z",
      "side": 1,
      "message": "Why can\u0027t we just throw directly from here?  Is there some concern that it makes the code-size bigger?  Can you please document the design decision because it isn\u0027t obvious and I\u0027m worried someone else is going to come through and refactor it if you don\u0027t record why.",
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8fbe603_56492291",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 11
      },
      "lineNbr": 176,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-11T22:41:30Z",
      "side": 1,
      "message": "Is there a reason for not reusing a single enum?",
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcd476be_6aa56166",
        "filename": "include/sdbusplus/utility/type_traits.hpp",
        "patchSetId": 11
      },
      "lineNbr": 168,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-11T22:41:30Z",
      "side": 1,
      "message": "sizeof... already returns std::size_t.  If you included cstddef just to get this it isn\u0027t necessary.  Just use auto.",
      "range": {
        "startLine": 168,
        "startChar": 21,
        "endLine": 168,
        "endChar": 27
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae328ee7_c7233de5",
        "filename": "include/sdbusplus/utility/type_traits.hpp",
        "patchSetId": 11
      },
      "lineNbr": 171,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-11T22:41:30Z",
      "side": 1,
      "message": "remove_cvref_t or decay_t ... you\u0027re missing volatile handling.  decay_t handles array paramters also, to decay them to a pointer.",
      "range": {
        "startLine": 171,
        "startChar": 23,
        "endLine": 171,
        "endChar": 61
      },
      "revId": "86a913c910b373ab2cf8c14f80a3d1edf2086d91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}