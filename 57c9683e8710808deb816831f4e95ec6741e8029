{
  "comments": [
    {
      "key": {
        "uuid": "f330695e_17540cc9",
        "filename": "example/get-all-properties.cpp",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-02-24T08:22:00Z",
      "side": 1,
      "message": "logSystemErrorCode is a function which produces lambda. It was verified that binary side is smaller if you pass lambda created by function rather than copy paste. Also it made sense when it was parameter to getAllProperties.\n\nNow you need to either logSystemErrorCode()(ec) inline logSystemErrorCode here.",
      "range": {
        "startLine": 99,
        "startChar": 20,
        "endLine": 99,
        "endChar": 41
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e3f60f7_9e1fb9dd",
        "filename": "example/get-all-properties.cpp",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-02-24T08:26:44Z",
      "side": 1,
      "message": "or change logSystemErrorCode to be standard function instead of function creating lambda:\n\nlogSystemErrorCode(ec)",
      "parentUuid": "f330695e_17540cc9",
      "range": {
        "startLine": 99,
        "startChar": 20,
        "endLine": 99,
        "endChar": 41
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc93df36_9017f010",
        "filename": "example/get-all-properties.cpp",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-24T16:36:08Z",
      "side": 1,
      "message": "That\u0027s a great catch.  I\u0027ve changed logSystemErrorCode to be a normal function instead of returning a lambda.  This cleans up the error handling path here quite a bit, and simplifies it.  Thanks!\n\nYour comment about binary size is well received, although it should be noted that for the examples, these two pieces off code generate exactly the same same binary, which has the same binary size as the old code.",
      "parentUuid": "1e3f60f7_9e1fb9dd",
      "range": {
        "startLine": 99,
        "startChar": 20,
        "endLine": 99,
        "endChar": 41
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31a0c34e_9c755c9c",
        "filename": "example/get-all-properties.cpp",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-02-26T09:02:32Z",
      "side": 1,
      "message": "Sure, I just wanted to explain the reason behind it. It made sense when it was complete handler, but after your change logSystemErrorCode(ec) seems better.\n\nPrevious and current solution should produce same binary size (at least in theory). Difference would be visible if you decide to manually inline logSystemErrorCode.",
      "parentUuid": "bc93df36_9017f010",
      "range": {
        "startLine": 99,
        "startChar": 20,
        "endLine": 99,
        "endChar": 41
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8d432c2_68d95aa5",
        "filename": "example/get-all-properties.cpp",
        "patchSetId": 5
      },
      "lineNbr": 233,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-02-25T10:14:00Z",
      "side": 1,
      "message": "Have you run this examples? If everything is ok you should be able to run it, ctrl+c after few seconds (depending on how fast your system is) fatal error count should be equal to 0.\n\nThis examples also work like tests.",
      "range": {
        "startLine": 233,
        "startChar": 11,
        "endLine": 233,
        "endChar": 28
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa8edc15_9f9a7049",
        "filename": "example/get-all-properties.cpp",
        "patchSetId": 5
      },
      "lineNbr": 233,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-25T15:29:43Z",
      "side": 1,
      "message": "The examples don\u0027t run on my desktop because of permissions issues on my flavor of debian, but the unit tests do pass, which has coverage of this.",
      "parentUuid": "d8d432c2_68d95aa5",
      "range": {
        "startLine": 233,
        "startChar": 11,
        "endLine": 233,
        "endChar": 28
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d42a76b0_895bcc77",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-02-23T01:06:50Z",
      "side": 1,
      "message": "Couldn\u0027t this just be replaced with std::forward(handler)?",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a37a42e_fd6f1815",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T01:57:11Z",
      "side": 1,
      "message": "This isn\u0027t a method, it\u0027s a lambda capture, so my understanding is that std::forward isn\u0027t applicable here, because we aren\u0027t calling a method, we\u0027re calling an inline constructor, similar to the form\n\nint x \u003d std::move(y);\n\nYou would never write this inline:\nint x \u003d std::forward(y);\n\nas it wouldn\u0027t compile (I think).\n\nSaid another way, you can\u0027t have perfect forwarding if the value isn\u0027t being forwarded, but is immediately being used.\n\nI\u0027m mostly sure on the above, but I\u0027ve never been super clear on the differences between std::forward and std::move.  I could be proven wrong, but if I remember right, this move is how the ASIO internals do it (through various macros and boost::bind) and I like to assume those guys understand this stuff better than I do.",
      "parentUuid": "d42a76b0_895bcc77",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24690d9f_31a41e43",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T02:42:04Z",
      "side": 1,
      "message": "Nevermind.  Latest patchset implements this.  I\u0027m still not sure the advantage in this case, but I can get behind std::forward being better in theory, and it does compile and work, which is not what I expected.",
      "parentUuid": "9a37a42e_fd6f1815",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc17ec91_43164e0d",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-02-23T03:24:15Z",
      "side": 1,
      "message": "It\u0027s not clear with all the diff colorations, but I was commenting on the whole lambda - I think this could just be bus.async_method_call(std::forward(handler), service,...) because the lambda doesn\u0027t do anything extra now.\n\nBut either way, the rule I learned from Scott Meyer is to use std::forward on universal references (which handler is). Since handler could theoretically be an lvalue reference to a closure object, we should use std::forward to preserve that type. (Although passing lvalue closures seems to be less common in practice in our code.)",
      "parentUuid": "24690d9f_31a41e43",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "947ff8bc_62b061f6",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T03:30:13Z",
      "side": 1,
      "message": "\u003e It\u0027s not clear with all the diff colorations, but I was commenting on the whole lambda - I think this could just be bus.async_method_call(std::forward(handler), service,...) because the lambda doesn\u0027t do anything extra now.\n\nOH, I understand now.  That\u0027s a really good point.  Will fix.\n\n\u003e \n\u003e But either way, the rule I learned from Scott Meyer is to use std::forward on universal references (which handler is). Since handler could theoretically be an lvalue reference to a closure object, we should use std::forward to preserve that type. (Although passing lvalue closures seems to be less common in practice in our code.)\n\nOk, that makes sense to me.  Patrick also hoped on discord with me for a second, and the change makes sense.  I\u0027m logging off for the night, but I\u0027ll get it fixed in the morning.",
      "parentUuid": "bc17ec91_43164e0d",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45918381_da5ba2e7",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:05:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "947ff8bc_62b061f6",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aeaf0979_e875de45",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-02-24T08:40:10Z",
      "side": 1,
      "message": "This may not work in all cases. async_method_call requires to pass proper types. This is not that important but you should know that there is small difference.\n\nWhen you do it like this you are allowed to do:\n[](auto ec, vector\u003c...\u003e) {}\n\nWhen you do plain forward you are forced to take ec as boost::system::error_code",
      "parentUuid": "45918381_da5ba2e7",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e1b3637_45b56ae9",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-24T16:36:08Z",
      "side": 1,
      "message": "\u003e This may not work in all cases. async_method_call requires to pass proper types. This is not that important but you should know that there is small difference.\n\u003e \n\u003e When you do it like this you are allowed to do:\n\u003e [](auto ec, vector\u003c...\u003e) {}\n\nIs this a real use case?  Can you point at code that does this?  Taking a callable parameter by auto seems problematic from a code reading comprehension standpoint.  I know if code got checked in that did this, I would ask for the type to be called out explicitly.\n\n\u003e \n\u003e When you do plain forward you are forced to take ec as boost::system::error_code\n\nYou\u0027re taking it as boost::system::error_code in both cases, in the former case you\u0027re just allowed to use auto, which obfuscates the type.\n\nTo my understanding, std::networking apis don\u0027t allow using auto for the error code return type, as handlers must meet the Handler concepts defined by the standard.  I\u0027d like to follow that model for consistency between async calls.\n\nEventually I\u0027d really like these to have their own defined concepts for handler type, with static asserts for when handler types don\u0027t work, but that\u0027s for another patchset.",
      "parentUuid": "aeaf0979_e875de45",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d354a8a2_dad51a03",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-02-25T10:14:00Z",
      "side": 1,
      "message": "I don\u0027t know if it is used. I am just saying that you are changing previous  behavior. Previously it was allowed to pass auto now you are taking that possibility. All I wanted by this comment was to make sure you are aware of the difference.\n\nIt will be up to sdbusplus maintainers to decide.\n\nNow about what you wrote, I disagree that using auto may be harder to read.\n\n[](boost::system::error_code ec) {\n  if (ec) {\n    return;\n   }\n}\n\n[](auto errorCode) {\n  if (errorCode) {\n    return;\n   }\n}\n\nBoth cases look the same, user will decide what they want, why force them?",
      "parentUuid": "2e1b3637_45b56ae9",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5147a417_ebe55238",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-25T15:29:43Z",
      "side": 1,
      "message": "\u003e I don\u0027t know if it is used. I am just saying that you are changing previous  behavior. Previously it was allowed to pass auto now you are taking that possibility. All I wanted by this comment was to make sure you are aware of the difference.\n\nI do appreciate you pointing it out;  I was not aware at the time, but I am now.  I think this behavior is more in line with the title of this patchset, which is attempting to make these look more like asio handlers.\n\n\u003e \n\u003e It will be up to sdbusplus maintainers to decide.\n\nOf course, happy to make whatever changes Patrick wants, but IMO this should stay as it is.\n\n\u003e \n\u003e Now about what you wrote, I disagree that using auto may be harder to read.\n\u003e \n\u003e [](boost::system::error_code ec) {\n\u003e   if (ec) {\n\u003e     return;\n\u003e    }\n\u003e }\n\u003e \n\u003e [](auto errorCode) {\n\u003e   if (errorCode) {\n\u003e     return;\n\u003e    }\n\u003e }\n\u003e \n\u003e Both cases look the same, user will decide what they want, why force them?\n\nWithout looking at the docs or relying on the name, what methods are allowed on errorCode?\n\nI could just as easily write\n[](auto ret)\n\nand it would be very difficult to determine the type of ret without looking at other examples, relying on an IDE, or reverse engineering sdbusplus.  If the type is called out explicitly, I can find the docs page on boost::system::error_code immediately.",
      "parentUuid": "d354a8a2_dad51a03",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82999476_dccc4402",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-02-26T09:02:32Z",
      "side": 1,
      "message": "To know what kind of lambda is expected to be passed here you still need to read the docs or look at the examples because signature takes Handler, it doesn\u0027t seem like anything is changing here. It is true that when you find example you have the type, with auto you have to look inside this function to see that boost::system::error_code is passed to your handler and that\u0027s something common, you read the code as is if you need details you go and take a look how is the function defined/implemented.\n\nI was looking for something in the internet which aligns with my knowledge about auto, this way may be more convincing.\n\nhttps://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/\n\nYou can start reading from:\n\"3. What are some popular concerns about using auto to declare variables? Are they valid? Discuss.\"\n\nJust to make it clear. I\u0027m fine with having boost::system::error_code explicit I just disagree that using auto instead is bad. We can go for boost::system::error_code if this is coding standard that was agreed for example.",
      "parentUuid": "5147a417_ebe55238",
      "range": {
        "startLine": 19,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c78fd4b9_32a3d3d2",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-02-23T01:06:50Z",
      "side": 1,
      "message": "std::forward instead?",
      "range": {
        "startLine": 34,
        "startChar": 19,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "578058d3_6bdbd4c5",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T01:57:11Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "c78fd4b9_32a3d3d2",
      "range": {
        "startLine": 34,
        "startChar": 19,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60865d22_60ae16f0",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T02:42:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "578058d3_6bdbd4c5",
      "range": {
        "startLine": 34,
        "startChar": 19,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31472d2c_759ccac7",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-02-24T08:40:10Z",
      "side": 1,
      "message": "just a note: you need pay for creating this type, it may be just int, but it may be tuple of string, ...\n\nIt is probably lighter than creating shared_ptr",
      "range": {
        "startLine": 50,
        "startChar": 20,
        "endLine": 50,
        "endChar": 22
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69b450fa_7384b5c9",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-24T16:36:08Z",
      "side": 1,
      "message": "You only need to pay for construction in the failing case, which seems ok to me.\n\ntuple\u003cstd::string, std::string\u003e construction doesn\u0027t call malloc, and if I remember right std::string zero initializes, so in terms of code, it\u0027s the same as declaring\n\nstd::array\u003cuint8_t, 24+24\u003e {0};\nWhich should be cheaper than constructing a shared_ptr, which will call into malloc a couple times to allocate the tracking struct as well as the object being constructed.  This gets constructed on stack, initialized with zeros.\n\nThe other option I considered was declaring a variable of type T at the top of this function, and using std::move(value) to put the result into it, that way all code paths returned the same variable.  That seems worse, as it forces a move in the golden path, which we\u0027d like to optimize for, and forces the object to be move constructable.",
      "parentUuid": "31472d2c_759ccac7",
      "range": {
        "startLine": 50,
        "startChar": 20,
        "endLine": 50,
        "endChar": 22
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1a0a44e_6b3fbd7b",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-02-26T09:02:32Z",
      "side": 1,
      "message": "Just a note with make shared there should be one memory allocation. But yes shared pointer is slow, mostly because it\u0027s thread safe, if we cut that part out it should be only a bit slower than raw pointers (you still have to increment/decrement reference counter).",
      "parentUuid": "69b450fa_7384b5c9",
      "range": {
        "startLine": 50,
        "startChar": 20,
        "endLine": 50,
        "endChar": 22
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb4541a8_9145060a",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-02-24T08:14:11Z",
      "side": 1,
      "message": "Sure now it is consistent. But why do you want to move error checking part to user code? Instead having it in single place now you need to put if (ec) in every invocation of this helper.",
      "range": {
        "startLine": 61,
        "startChar": 24,
        "endLine": 61,
        "endChar": 41
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b73bdd9_4132e537",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-02-24T08:17:59Z",
      "side": 1,
      "message": "How about creating two overloads, one which takes single handler with two parameters and one with two handler one parameter in each?",
      "parentUuid": "eb4541a8_9145060a",
      "range": {
        "startLine": 61,
        "startChar": 24,
        "endLine": 61,
        "endChar": 41
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21a92167_388d0308",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-24T16:36:08Z",
      "side": 1,
      "message": "\"But why do you want to move error checking part to user code? \"\n\nI\u0027m not following.  Error checking will be in user code regardless, this code just makes it a branch instead of a secondary object.  Yes, I would like users to handle their errors explicitly, and without constructing an extra object just to store in the failing case.\n\n\n\"How about creating two overloads,\"\n\nI thought about creating two overloads temporarily, so this change could be rolled out, then the old one deleted, but looking through the codebase, I found one usage of these new methods (in telemetry that I sent the patchset out for) so it seemed easier to just jump directly to the new API.\n\nLong term, I\u0027d rather we don\u0027t have two overloads of this for consistency with std::networking.",
      "parentUuid": "8b73bdd9_4132e537",
      "range": {
        "startLine": 61,
        "startChar": 24,
        "endLine": 61,
        "endChar": 41
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b048e36e_b07aa030",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-24T16:56:36Z",
      "side": 1,
      "message": "For the one usage of getProperty that I could find in the codebase I\u0027ve added the extra overload and marked it as deprecated.  This should avoid the hard binding between these two patchsets when they get merged.\n\nI wasn\u0027t able to find usages of the other methods, so they should be easy to move forward directly.",
      "parentUuid": "21a92167_388d0308",
      "range": {
        "startLine": 61,
        "startChar": 24,
        "endLine": 61,
        "endChar": 41
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7ab71d1_35f7e563",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-02-25T10:14:00Z",
      "side": 1,
      "message": "How about other users of sdbusplus? This project can be used by anything, it doesn\u0027t have to be related to openBmc. It would be nice to give other projects (if any) some warning before breaking change is introduced.\n\nWhat about other helpers methods? If there is someone who is using them and that code is not public this is going to be a breaking change without a warning.\n\nI am just raising my concerns, maintainers will decide.",
      "parentUuid": "b048e36e_b07aa030",
      "range": {
        "startLine": 61,
        "startChar": 24,
        "endLine": 61,
        "endChar": 41
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42eb613d_a908c96f",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-25T15:29:43Z",
      "side": 1,
      "message": "\u003e How about other users of sdbusplus?  This project can be used by anything, it doesn\u0027t have to be related to openBmc. It would be nice to give other projects (if any) some warning before breaking change is introduced.\n\nWe didn\u0027t give warning when the original breaking change that moved this to two handlers was introduced, and we\u0027ve made several other behavior breaking changes in the past without warning or deprecation.  Considering OpenBMC is the heaviest user of this, this method is new, and so far as I\u0027m aware there\u0027s only one usage of any of this in openbmc, it seems unlikely that any other projects have picked it up.\n\nWith that said, I\u0027m happy to do what Patrick wants here.\n\n\u003e \n\u003e What about other helpers methods? If there is someone who is using them and that code is not public this is going to be a breaking change without a warning.\n\nI can\u0027t make guesses about code that I can\u0027t see and isn\u0027t open source.  If other open source users pop up, I\u0027m happy to go push patches to fix their code too.  If we talk about downstream fork compatibility, technically any of these projects could\u0027ve patched this method, and any change here would be breaking.  I can\u0027t reason about code that I can\u0027t see.\n\n\u003e \n\u003e I am just raising my concerns, maintainers will decide.\n\nYep, I\u0027m happy to do anything that Patrick asks for, IMO I think what\u0027s currently in the patchset is the right path.",
      "parentUuid": "f7ab71d1_35f7e563",
      "range": {
        "startLine": 61,
        "startChar": 24,
        "endLine": 61,
        "endChar": 41
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a09524f_02d37fa8",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-02-25T17:54:11Z",
      "side": 1,
      "message": "\u003e We didn\u0027t give warning when the original breaking change that moved this to two handlers was introduced\n\nThese functions were first introduced exactly as they are - there was no breaking change.",
      "parentUuid": "42eb613d_a908c96f",
      "range": {
        "startLine": 61,
        "startChar": 24,
        "endLine": 61,
        "endChar": 41
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a31bbb33_729e2642",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-25T18:37:45Z",
      "side": 1,
      "message": "The commit I was thinking of was 807419d33ba89a20d63d209f9ef5770c37069e4b\n\nWe moved the async_get from the asio style, to this new dual callback style;  With that said, I was mistaken, this was done in an example, so it\u0027s not really an interface breaking change, just changing the examples a bit, so you\u0027re right.\n\nWith that said, we\u0027ve changed behavior of other method calls before in ABI breaking ways (changing mapbox::variant to std::variant, ect), and so far as I can tell, nobody (with the one exception) uses these methods yet, so my point still stands, I think we can safely make this change without having to carry two versions of this in the long run.\n\nIf there\u0027s code that does use this that I haven\u0027t pushed a patch to, feel free to point me at it and i\u0027ll get more patches pushed to fix it.",
      "parentUuid": "4a09524f_02d37fa8",
      "range": {
        "startLine": 61,
        "startChar": 24,
        "endLine": 61,
        "endChar": 41
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26a47eff_df93ded3",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-02-23T01:06:50Z",
      "side": 1,
      "message": "just forward handler?",
      "range": {
        "startLine": 64,
        "startChar": 8,
        "endLine": 65,
        "endChar": 24
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e875d8c_364903e4",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T01:57:11Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "26a47eff_df93ded3",
      "range": {
        "startLine": 64,
        "startChar": 8,
        "endLine": 65,
        "endChar": 24
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0861bf72_e9ffbc89",
        "filename": "include/sdbusplus/asio/property.hpp",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T02:42:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e875d8c_364903e4",
      "range": {
        "startLine": 64,
        "startChar": 8,
        "endLine": 65,
        "endChar": 24
      },
      "revId": "57c9683e8710808deb816831f4e95ec6741e8029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}