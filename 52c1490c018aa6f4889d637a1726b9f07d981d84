{
  "comments": [
    {
      "key": {
        "uuid": "f727acce_3d018ae5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-04-23T14:16:17Z",
      "side": 1,
      "message": "Signed-off ?",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a9d7b69_ff319297",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-26T16:19:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f727acce_3d018ae5",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9597758_1970b699",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-22T23:40:13Z",
      "side": 1,
      "message": "It would be easier / faster to rfind(\u0027/\u0027) directly here. The beginning of the filename would be the index or 0 if not found and you wouldn\u0027t need to construct the parent path only to discard it.",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8aa1fcb_70200c2f",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-22T23:49:36Z",
      "side": 1,
      "message": "We do use parent on line 169, so we\u0027d need to generate it for that path either way, but I think you\u0027re right, this could be more efficient if we did the rfind first.",
      "parentUuid": "c9597758_1970b699",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afb5d174_87b09f06",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-23T09:21:37Z",
      "side": 1,
      "message": "I would just use sd_bus_encode_path_many / sd_bus_decode_path_many with \"%\" as the format string since it doesn\u0027t require the parent path at all. Would have been nice if they had a simple  `sd_bus_{encode,decode}` function.",
      "parentUuid": "a8aa1fcb_70200c2f",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a5a148e_fcd35cbe",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-26T16:19:05Z",
      "side": 1,
      "message": "sd_bus_path_decode_many would still require the parent path, as we have to pass in the \"prefix\" as part of the decode so we get only the arg we want out.\n\nOr I\u0027m really missing something on that method.\n\nThis isn\u0027t fixed in the latest patchset, I need to look a little deeper at how to simplify this.",
      "parentUuid": "afb5d174_87b09f06",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d52801c2_f50d230f",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-26T20:55:37Z",
      "side": 1,
      "message": "You just need to use sd_bus_encode_path_many(\u0026out, \"%\", to_escape) and sd_bus_decode_path_many(to_unescape, \"\", \u0026out)",
      "parentUuid": "8a5a148e_fcd35cbe",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e1303b9_86d1b155",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-26T20:59:41Z",
      "side": 1,
      "message": "sd_bus_decode_path_many(to_unescape, \"\", \u0026out) will decode the slashes into escape characters, right?  Isn\u0027t that the whole reason why you need the parent as the input?",
      "parentUuid": "d52801c2_f50d230f",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bfc52c1_97d4aaa0",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-26T21:02:44Z",
      "side": 1,
      "message": "You don\u0027t need to know what the parent string is though, you just need a substring reference that contains the filename.",
      "parentUuid": "9e1303b9_86d1b155",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57b7bea5_12613035",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-22T23:40:13Z",
      "side": 1,
      "message": "Too bad gcc doesn\u0027t support array length deduction with partial specialization until 11.",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "608d7bd5_c630b079",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-22T23:49:36Z",
      "side": 1,
      "message": "but there\u0027s something so satisfying about seeing 16 there ðŸ˜‹\n\nTime to switch to rust.",
      "parentUuid": "57b7bea5_12613035",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8110ddea_0478896f",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2021-04-22T23:53:39Z",
      "side": 1,
      "message": "\u003e Time to switch to rust.\n\nI\u0027m +1 on that, but I think Rust happens to suffer from pretty much the exact same problem unfortunately: https://github.com/rust-lang/rfcs/pull/2545",
      "parentUuid": "608d7bd5_c630b079",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc6ec792_55a78110",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-04-24T01:05:42Z",
      "side": 1,
      "message": "Why not just say\n\n  const char* hex \u003d \"0123456789abcdef\";\n\nYou have to double check the contents are correct either way, but std::array is so much more verbose.",
      "parentUuid": "8110ddea_0478896f",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41639237_8de54c8e",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-26T16:19:05Z",
      "side": 1,
      "message": "I\u0027ll leave this one up to the maintainer if he wants me to change it.  std::array is more \"modern\" because you can do range checks in a much more consistent way with .size(), but in this case, because we don\u0027t do any range checks (because they\u0027re intrinsically safe with our shifts).  I don\u0027t have a strong preference here.\n\nAt the very least, leaving this as a c++ array would let us enable the:\nhttps://clang.llvm.org/extra/clang-tidy/checks/modernize-avoid-c-arrays.html\nclang-tidy check across this whole project in the future.",
      "parentUuid": "dc6ec792_55a78110",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a37f09c_63e0b09d",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 228,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-04-24T01:05:42Z",
      "side": 1,
      "message": "firstChar could theoretically be negative, right?",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11ab95ec_dff8d40b",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 3
      },
      "lineNbr": 228,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-26T16:19:05Z",
      "side": 1,
      "message": "Fixed on latest patchset.",
      "parentUuid": "1a37f09c_63e0b09d",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afedfc93_f6af65dc",
        "filename": "test/message/types.cpp",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2021-04-23T02:22:01Z",
      "side": 1,
      "message": "This changes the previous behavior, I am not sure if there is existing code that depends on this API, if yes, how do we make sure they are not affected?",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f524c7c_0f0b0611",
        "filename": "test/message/types.cpp",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-26T16:19:05Z",
      "side": 1,
      "message": "This is intentionally changing old behavior because of #60;  I believe I wrote most (all?) of the current usages of operator/ that exist at this point, and for at least the things I\u0027ve done sofar, this is better behavior.\n\nIn a perfect world, we wouldn\u0027t need any of this, but we need to transition some APIs around, and this was the best of the mediocre options.",
      "parentUuid": "afedfc93_f6af65dc",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33b2935a_a891ee6d",
        "filename": "test/message/types.cpp",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-22T23:40:13Z",
      "side": 1,
      "message": "This is missing a test case for\n`sdbusplus::message::object_path(\"/abc\") / \"bios_active\"`\n-\u003e\n`sdbusplus::message::object_path(\"/abc/bios_active\")`",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "287074ee_dee58982",
        "filename": "test/message/types.cpp",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-22T23:49:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "33b2935a_a891ee6d",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2b6b3dd_ae8a36fd",
        "filename": "test/message/types.cpp",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-26T16:19:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "287074ee_dee58982",
      "revId": "52c1490c018aa6f4889d637a1726b9f07d981d84",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}