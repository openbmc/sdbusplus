{
  "comments": [
    {
      "key": {
        "uuid": "e350d54b_473fcc24",
        "filename": "tools/sdbusplus/namedelement.py",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-05-04T22:24:35Z",
      "side": 1,
      "message": "Can\u0027t this be handled by the final expression?",
      "revId": "986505b77a8054d9ae6605b5cc9f9cdf3c638e3e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "995d5345_4c249e1a",
        "filename": "tools/sdbusplus/namedelement.py",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-05-05T20:17:14Z",
      "side": 1,
      "message": "Not easily?  Unless you have a suggestion on regex syntax, but I was trying to keep the regexes obvious.\n\nIn current form, line 83 would turn \"BMC\" into \"bmC\".",
      "parentUuid": "e350d54b_473fcc24",
      "revId": "986505b77a8054d9ae6605b5cc9f9cdf3c638e3e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a992d28_1de7cc88",
        "filename": "tools/sdbusplus/namedelement.py",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-05-05T21:58:49Z",
      "side": 1,
      "message": "Oh, right",
      "parentUuid": "995d5345_4c249e1a",
      "revId": "986505b77a8054d9ae6605b5cc9f9cdf3c638e3e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1b772ba_0e44f0ff",
        "filename": "tools/sdbusplus/namedelement.py",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-05-04T20:58:00Z",
      "side": 1,
      "message": "I really don\u0027t like how specific this logic gets to specific naming conventions. Can we just abandon the lower camel first character alltogether? Are we going to just keep hacking in new overrides for every single strange convention we find?",
      "revId": "986505b77a8054d9ae6605b5cc9f9cdf3c638e3e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e8ad6b8_aa11250f",
        "filename": "tools/sdbusplus/namedelement.py",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-05-04T21:03:52Z",
      "side": 1,
      "message": "What do you mean by \"abandon the lower camel first character\"?  Do you mean \"stop using lower-camel-case and only use upper-camel-case\"?\n\nI think that causes collisions between a bunch of methods / properties / enums / classes.  I know I\u0027ve cases where people named an enum and a property the same and it compiles due to difference of cases.\n\n\u003e Are we going to just keep hacking in new overrides for every single strange convention we find?\n\nIf we find other ones that are useful to workaround, yes?  I agree that it isn\u0027t ideal but it isn\u0027t really a significant amount of work if someone wants to add a new case.",
      "parentUuid": "f1b772ba_0e44f0ff",
      "revId": "986505b77a8054d9ae6605b5cc9f9cdf3c638e3e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e132c6d0_39ca12d2",
        "filename": "tools/sdbusplus/namedelement.py",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-05-04T22:24:35Z",
      "side": 1,
      "message": "Yeah, that\u0027s unfortunate that we have naming conflicts.\n\nMy concern with having all of these rules is the unintended side effects of the different patterns we are matching and altering.",
      "parentUuid": "6e8ad6b8_aa11250f",
      "revId": "986505b77a8054d9ae6605b5cc9f9cdf3c638e3e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a68b2056_8256feb5",
        "filename": "tools/sdbusplus/namedelement.py",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-05-05T20:17:14Z",
      "side": 1,
      "message": "\u003e My concern with having all of these rules is the unintended side effects of the different patterns we are matching and altering.\n\nHow would you like me to alleviate your concern?  We don\u0027t have a test framework already set up for this code (unfortunately) so what I am currently doing is using this as a subproject with phosphor-dbus-interfaces and comparing the output with/without the change to make sure the results are sane.",
      "parentUuid": "e132c6d0_39ca12d2",
      "revId": "986505b77a8054d9ae6605b5cc9f9cdf3c638e3e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07055aec_8aa7d516",
        "filename": "tools/sdbusplus/namedelement.py",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-05-05T21:58:49Z",
      "side": 1,
      "message": "Should be fine for now, I know other frameworks have gone with a dictionary of acronyms to handle these types of things. Rails had it but I guess python inflection didn\u0027t implement it.",
      "parentUuid": "a68b2056_8256feb5",
      "revId": "986505b77a8054d9ae6605b5cc9f9cdf3c638e3e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}