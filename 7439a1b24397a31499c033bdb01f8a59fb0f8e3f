{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "69c970c9_7467ca28",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-17T13:17:17Z",
      "side": 1,
      "message": "Delay or hang?  Is a delay when calling the dbus-broker really a problem?  I\u0027m kind of surprised we need to go through all this effort.\n\nThe problem, in my mind, with using match_async is that you don\u0027t know when the match has been registered.  You potentially end up with ABA issues or causal-ordering violations.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 49
      },
      "revId": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "134b75f6_bcbf92b4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-01-18T03:39:32Z",
      "side": 1,
      "message": "\u003e Delay or hang? Is a delay when calling the dbus-broker really a problem? I\u0027m kind of surprised we need to go through all this effort.\n\nIt depends.\nThe event will not be polled by asio until a new incoming event occurs.\nSo if there is no new incoming event, it hangs.\n\n\u003e The problem, in my mind, with using match_async is that you don\u0027t know when the match has been registered. You potentially end up with ABA issues or causal-ordering violations.\n\nYes, this is valid concern. I have no idea how to make it behave correctly in such case.\nDo you have any suggesting if we really want an async match?",
      "parentUuid": "69c970c9_7467ca28",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 49
      },
      "revId": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b665cc97_ce618b58",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-01-18T15:56:14Z",
      "side": 1,
      "message": "How about adding a new functor for this new async match API, so the caller could pass a callback that does the init of the property.\n\nIn previous practice, we usually do:\n* Add a match\n* Initially get the property\nThen the property is guaranteed to be updated.\n\nWith asio API, we could do:\n* Add a match with a callback\n* Initially get the property in the callback\n\nThen we could trust the property as long as the initial callback is called.",
      "parentUuid": "134b75f6_bcbf92b4",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 49
      },
      "revId": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67dda363_dabf7981",
        "filename": "include/sdbusplus/bus/match.hpp",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-17T13:17:17Z",
      "side": 1,
      "message": "I don\u0027t like that we\u0027re mixing boost stuff into what use to be non-boost headers.  How do we unravel that?\n\nShould we make sdbusplus::asio::match that inherits from this match?",
      "revId": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e982bef_936dc63b",
        "filename": "include/sdbusplus/bus/match.hpp",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-01-18T03:39:32Z",
      "side": 1,
      "message": "Let\u0027s discuss below.",
      "parentUuid": "67dda363_dabf7981",
      "revId": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "203f2aeb_e5feba28",
        "filename": "include/sdbusplus/bus/match.hpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-17T13:17:17Z",
      "side": 1,
      "message": "I think this implementation has the behavior of implicitly changing behavior for existing code.  You use to be able to pass a connection to the match constructor and it would implicitly convert to the `match(bus_t` one.  Now, that implicit conversion is no more because the direct-constructor is called.  This means that existing code now starts to \"continue\" before the match is actually registered.\n\nWe need to at least make this code explicitly opt-in rather than implicitly changing the behavior of existing code.\n\n(As I\u0027ve said earlier in the commit review, I\u0027m not convinced this is a real problem we should even worry about.)",
      "revId": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b672ae8b_6027d25c",
        "filename": "include/sdbusplus/bus/match.hpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-01-18T03:39:32Z",
      "side": 1,
      "message": "\u003e I think this implementation has the behavior of implicitly changing behavior for existing code. \n\nIndeed, and this is intended.\nThe issue is found in our WebUI\u0027s stress test, that bmcweb does not handle any request anymore (due to the events are already queued so epoll will not return), until we send a new request to bmcweb.\nBy changing the current code\u0027s behavior to use async match for asio, it effectively resolve the above issue, making sure all events are handled as expected.\n\n\u003e We need to at least make this code explicitly opt-in rather than implicitly changing the behavior of existing code.\n\nAs the previous commit\u0027s example code shows, the current code using asio with match is wrong and has problem, so I would like to fix it.\nOtherwise we will have to change all the asio code using match to use the new async match API",
      "parentUuid": "203f2aeb_e5feba28",
      "revId": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2604be9_2876ef93",
        "filename": "include/sdbusplus/bus/match.hpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-20T01:07:51Z",
      "side": 1,
      "message": "\u003e \u003e I think this implementation has the behavior of implicitly changing behavior for existing code. \n\u003e \n\u003e Indeed, and this is intended.\n\u003e The issue is found in our WebUI\u0027s stress test, \n\nI\u0027m very surprised that a UI stress test is creating match expressions.  Can you give a link which match expression in the bmcweb code is causing the blocking behavior?\n\n\u003e that bmcweb does not handle any request anymore (due to the events are already queued so epoll will not return), until we send a new request to bmcweb.\n\u003e By changing the current code\u0027s behavior to use async match for asio, it effectively resolve the above issue, making sure all events are handled as expected.\n\nPlease don\u0027t do that, as it will break existing code.  An example of something broken is this here:\n\nhttps://github.com/openbmc/bmcweb/blob/18f8f608b966c802b3e2a389e3c1ec5a1fd9407b/include/image_upload.hpp#L21\n\nThe code expects that the match is in place BEFORE it goes to the next line.  Now that it\u0027s async, there\u0027s a race condition if the match fails to create, or if the match isn\u0027t created by the time the message to the update daemon goes out.  If we had an asio matcher that supported async_wait() on construct, we could make that code better, but we really shouldn\u0027t be changing behavior for existing objects.\n\nThere needs to be SOME change made in code, and some judgement applied to determine if an async wait on a return is a problem.\n\n\u003e \n\u003e \u003e We need to at least make this code explicitly opt-in rather than implicitly changing the behavior of existing code.\n\n+1000\n\n\u003e \n\u003e As the previous commit\u0027s example code shows, the current code using asio with match is wrong and has problem, so I would like to fix it.\n\u003e Otherwise we will have to change all the asio code using match to use the new async match API\n\nAs much as it would be great to fix this here, we\u0027ll need to audit each usage for whether or not the blocking behavior was required.  A quick grep shows there are 19 match_t objects in bmcweb.  it should be pretty doable to move them over to a new object and solve your problem without effecting the rest of the code.  We can\u0027t just blanket change the behavior without breaking user-facing beahvior.",
      "parentUuid": "b672ae8b_6027d25c",
      "revId": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "245a3bdf_b1c795c5",
        "filename": "include/sdbusplus/bus/match.hpp",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-17T13:17:17Z",
      "side": 1,
      "message": "What about include/sdbusplus/async/match.hpp?",
      "revId": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72e2223e_468dbefd",
        "filename": "test/bus/match.cpp",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2024-01-17T04:15:44Z",
      "side": 1,
      "message": "We should not be mixing boost asio internals into the legacy interface which has nothing to do with them.",
      "revId": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e3b4bb9_03e0c394",
        "filename": "test/bus/match.cpp",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-01-17T05:42:49Z",
      "side": 1,
      "message": "This is for demo purpose, I could make a separate test file to separate the usage of async match, if necessary.",
      "parentUuid": "72e2223e_468dbefd",
      "revId": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38a0f949_ec365e0e",
        "filename": "test/bus/match.cpp",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-01-19T02:00:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e3b4bb9_03e0c394",
      "revId": "7439a1b24397a31499c033bdb01f8a59fb0f8e3f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}