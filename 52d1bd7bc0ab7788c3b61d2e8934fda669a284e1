{
  "comments": [
    {
      "key": {
        "uuid": "40d56ad3_1a602046",
        "filename": "include/sdbusplus/exception.hpp",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-09-02T21:39:42Z",
      "side": 1,
      "message": "Why can\u0027t this be made pure? Don\u0027t we want to fix places where the errno isn\u0027t defined? Otherwise errno shouldn\u0027t be part of this class.",
      "revId": "52d1bd7bc0ab7788c3b61d2e8934fda669a284e1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05e67b64_c02ce864",
        "filename": "include/sdbusplus/exception.hpp",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-09-02T21:41:16Z",
      "side": 1,
      "message": "I get that you don\u0027t want to change all of the derivatives in a single change, but I\u0027d like to see that there is a follow on that converts this to pure in that case.",
      "parentUuid": "40d56ad3_1a602046",
      "revId": "52d1bd7bc0ab7788c3b61d2e8934fda669a284e1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9e755cf_16c189cd",
        "filename": "include/sdbusplus/exception.hpp",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-09-02T21:52:56Z",
      "side": 1,
      "message": "I probably should at least move this over into the cpp file.\n\nIs there some reason you want to make sure it is pure?  I was trying to make sure that the systemd default was preserved and it seemed better to make that happen by providing a non-pure default.  If I make this pure-virtual, we have to have hundreds of default functions in the generated code (phosphor-dbus-interfaces) that simply returns EIO.",
      "parentUuid": "05e67b64_c02ce864",
      "revId": "52d1bd7bc0ab7788c3b61d2e8934fda669a284e1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bcfe075_ba6a7754",
        "filename": "include/sdbusplus/exception.hpp",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-09-02T22:35:44Z",
      "side": 1,
      "message": "Doesn\u0027t your other CL fix all of the default functions? I just don\u0027t want it to become non-obvious at runtime why the errno is mismatched with the description or name.",
      "parentUuid": "e9e755cf_16c189cd",
      "revId": "52d1bd7bc0ab7788c3b61d2e8934fda669a284e1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5794c07f_b4a5ef11",
        "filename": "include/sdbusplus/exception.hpp",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-09-02T22:46:27Z",
      "side": 1,
      "message": "The next change added it for the internal exceptions we have defined. \n\nThe change after that adds then for sdbus++ generated exceptions (from PDI) if they are in the YAML file, but otherwise it defaults to this implementation if it isn’t in the YAML.\n\nI could make that change+2 add default values of EIO also, but that’s what I meant about generating hundreds of trivial functions, when inheritance does the same thing.",
      "parentUuid": "9bcfe075_ba6a7754",
      "revId": "52d1bd7bc0ab7788c3b61d2e8934fda669a284e1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcfe0d12_77f2753e",
        "filename": "include/sdbusplus/exception.hpp",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-09-02T22:56:12Z",
      "side": 1,
      "message": "Doesn\u0027t that mean we should just have one more layer of indirection specifically for PDI generated exceptions to provide this default? Any other non-PDI definitions would not want to accidentally miss defining this method.",
      "parentUuid": "5794c07f_b4a5ef11",
      "revId": "52d1bd7bc0ab7788c3b61d2e8934fda669a284e1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}