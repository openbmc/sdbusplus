{
  "comments": [
    {
      "key": {
        "uuid": "5d68faf5_2c9f4bc2",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 158,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-26T23:02:08Z",
      "side": 1,
      "message": "nit: This check is redundant as substr(str.size()) will do this implicitly",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00469058_506a0dcc",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 158,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-27T00:51:44Z",
      "side": 1,
      "message": "Then I\u0027d have to catch that exception and return this same thing?   That seems like it would be more code.  Some of this is stemming from me trying to handle all corner cases of bad paths, like empty string, and return them in a sane way.  This was previous std::optional, but patrick wanted it to be more like std::filesystem, so I tried to make the behavior match.",
      "parentUuid": "5d68faf5_2c9f4bc2",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a973e0d2_749e6fa9",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 158,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-27T01:05:46Z",
      "side": 1,
      "message": "There is no exception, you can just delete the code. substr(str.size()) is legal and returns \"\".",
      "parentUuid": "00469058_506a0dcc",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f796811b_aa04f2a2",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 158,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-27T17:09:58Z",
      "side": 1,
      "message": "I tried to do it without the check in patchset 8, but valgrind didn\u0027t like it.  There might still be a bug in my code, but I\u0027m not seeing it.",
      "parentUuid": "a973e0d2_749e6fa9",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05a81150_6f4e3a99",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 158,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-27T19:09:24Z",
      "side": 1,
      "message": "`std::string_view filename \u003d str.substr(firstIndex);`\n\ncreates a temporary std::string and that\u0027s what ubasan doesn\u0027t like.\n\n`auto filename \u003d std::string_view(str).substr(firstIndex);`\n\nwill reference str directly.",
      "parentUuid": "f796811b_aa04f2a2",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed543ab7_3ab79d3f",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 158,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-27T19:20:16Z",
      "side": 1,
      "message": "\u003e `std::string_view filename \u003d str.substr(firstIndex);`\n\u003e \n\u003e creates a temporary std::string and that\u0027s what ubasan doesn\u0027t like.\n\u003e \n\nThat seems so obvious now.....  DOH.\n\n\u003e `auto filename \u003d std::string_view(str).substr(firstIndex);`\n\u003e \n\u003e will reference str directly.",
      "parentUuid": "05a81150_6f4e3a99",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b836828_dcc25f44",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-26T23:02:08Z",
      "side": 1,
      "message": "nit: We should prefer a string view here to avoid the intermediate string copy.",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9f05857_71f20a87",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-27T00:51:44Z",
      "side": 1,
      "message": "I\u0027m wary to do that because we need a null terminated string to pass to sd_bus_path_decode_many later, also on line 167, we might have to construct a string from said string_view anyway.\n\nTechnically you can\u0027t rely on std::string_view.data() being null terminated, although I suspect we should be able to in this case because all std::strings are null terminated these days, and while string_view doesn\u0027t guarantee that, std::string does, so, only kind of undefined behavior?\n\nIf you think that\u0027s really the right thing to do, I can make that change here, but I suspect that\u0027s going to be worse in terms of peoples mental model and style for std::string_view.data().",
      "parentUuid": "2b836828_dcc25f44",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4a4682f_b37c63d0",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-27T01:05:46Z",
      "side": 1,
      "message": "Right, std::string_view wouldn\u0027t work nicely here. I would just use `auto filename \u003d str.c_str() + firstIndex` then. It would still work the same as substr, even if you remove the size() check above. And you could return it / use it in sd_bus_path*",
      "parentUuid": "e9f05857_71f20a87",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebed9c2f_31fec0a3",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-27T17:09:58Z",
      "side": 1,
      "message": "I did this with string_view;  That seemed better than going to raw pointers.",
      "parentUuid": "a4a4682f_b37c63d0",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bb058a9_b093aa04",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-27T19:09:24Z",
      "side": 1,
      "message": "For zstrings, I would just keep the `char*` type. You wouldn\u0027t need to check `.empty()` prior to accessing `filename[0]` since you can always depend on the nul terminator existing at the end of the string. You also wouldn\u0027t need to make two independent substrings with a string_view and then a `filename.c_str() + firstIndex` later.",
      "parentUuid": "ebed9c2f_31fec0a3",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "718296d3_b68641eb",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-27T19:20:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9bb058a9_b093aa04",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf0583a4_bd9da6d8",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 185,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-26T23:02:08Z",
      "side": 1,
      "message": "Probably worth fixing this separately / having a test for it?",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8495ab2f_2f7f558c",
        "filename": "include/sdbusplus/message/native_types.hpp",
        "patchSetId": 6
      },
      "lineNbr": 185,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-27T00:51:44Z",
      "side": 1,
      "message": "We can fix it in another patch.  This was only really required for when I used parent_path above to handle one of the non-conforming dbus path test cases, but now that we\u0027re not using this, correct, I suspect this doesn\u0027t need to be this way.\n\nWill fix in next patch.",
      "parentUuid": "bf0583a4_bd9da6d8",
      "revId": "8b8f89f16a3272088e59b8f154885c2dbc08b78d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}