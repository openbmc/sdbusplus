{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "15ca5371_515b8f7f",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2022-03-07T09:08:29Z",
      "side": 1,
      "message": "Can\u0027t we just accept only const pointers?",
      "range": {
        "startLine": 55,
        "startChar": 21,
        "endLine": 55,
        "endChar": 73
      },
      "revId": "1db5d2b1127181810b0bf0612c3c3e5ba94a2fd5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5226e900_f722e658",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-03-07T09:32:45Z",
      "side": 1,
      "message": "The thing is we can use get_if\u003cint\u003e, but can\u0027t get_if\u003cconst int\u003e, it\u0027s API restriction. Container is const so get_if\u003cint\u003e will return const int* so everything is fine.",
      "parentUuid": "15ca5371_515b8f7f",
      "range": {
        "startLine": 55,
        "startChar": 21,
        "endLine": 55,
        "endChar": 73
      },
      "revId": "1db5d2b1127181810b0bf0612c3c3e5ba94a2fd5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19b3ec33_ebf73134",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2022-03-08T08:47:09Z",
      "side": 1,
      "message": "Oh, I read it wrong. This makes sense, thanks!",
      "parentUuid": "5226e900_f722e658",
      "range": {
        "startLine": 55,
        "startChar": 21,
        "endLine": 55,
        "endChar": 73
      },
      "revId": "1db5d2b1127181810b0bf0612c3c3e5ba94a2fd5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c784aa3_9bca456d",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 9
      },
      "lineNbr": 102,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2022-03-07T09:08:29Z",
      "side": 1,
      "message": "I assume pointers are added as optional-like alternative. Is it actually necessary?  While optional\u003c\u003e is self explaining, the same behavior for pointers (no error on failure) might come surprising to caller.",
      "range": {
        "startLine": 102,
        "startChar": 23,
        "endLine": 102,
        "endChar": 52
      },
      "revId": "1db5d2b1127181810b0bf0612c3c3e5ba94a2fd5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5f38659_0989324b",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 9
      },
      "lineNbr": 102,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-03-07T09:32:45Z",
      "side": 1,
      "message": "Yes it is necessary for bmcweb purposes. If we want to introduce this function in bmcweb it can\u0027t increase binary size and to do this we need to use pointers. Pointers behave exactly like optionals, so users can choose between them.\n\nBmcweb policy is that each pointer needs to be checked before using, so for bmcweb it would be more surprising that there is no need to check pointer before dereferencing.",
      "parentUuid": "3c784aa3_9bca456d",
      "range": {
        "startLine": 102,
        "startChar": 23,
        "endLine": 102,
        "endChar": 52
      },
      "revId": "1db5d2b1127181810b0bf0612c3c3e5ba94a2fd5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "020fbb87_34bcef83",
        "filename": "include/sdbusplus/unpack_properties.hpp",
        "patchSetId": 9
      },
      "lineNbr": 102,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2022-03-08T08:47:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e5f38659_0989324b",
      "range": {
        "startLine": 102,
        "startChar": 23,
        "endLine": 102,
        "endChar": 52
      },
      "revId": "1db5d2b1127181810b0bf0612c3c3e5ba94a2fd5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0c5654c_83a65f6f",
        "filename": "test/utility/type_traits.cpp",
        "patchSetId": 9
      },
      "lineNbr": 96,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2022-03-07T09:08:29Z",
      "side": 1,
      "message": "If test should also serve as documentation, perhaps it\u0027s good idea to have testcases with const and/or ref?",
      "revId": "1db5d2b1127181810b0bf0612c3c3e5ba94a2fd5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b8737cc_fc28241d",
        "filename": "test/utility/type_traits.cpp",
        "patchSetId": 9
      },
      "lineNbr": 96,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2022-03-08T12:15:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0c5654c_83a65f6f",
      "revId": "1db5d2b1127181810b0bf0612c3c3e5ba94a2fd5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}